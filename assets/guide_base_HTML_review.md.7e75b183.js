import{_ as l,o,c as t,Q as a}from"./chunks/framework.aea2adc8.js";const E=JSON.parse('{"title":"HTML 复习","description":"","frontmatter":{},"headers":[],"relativePath":"guide/base/HTML/review.md","filePath":"guide/base/HTML/review.md","lastUpdated":1697685561000}'),e={name:"guide/base/HTML/review.md"},i=a('<h1 id="html-复习" tabindex="-1">HTML 复习 <a class="header-anchor" href="#html-复习" aria-label="Permalink to &quot;HTML 复习&quot;">​</a></h1><h2 id="html5-新特性与语义化" tabindex="-1">HTML5 新特性与语义化 <a class="header-anchor" href="#html5-新特性与语义化" aria-label="Permalink to &quot;HTML5 新特性与语义化&quot;">​</a></h2><p><strong>概念</strong>:</p><p>HTML5的语义化指的是合理正确地使用语义化的标签来创建页面结构。正确的标签用于正确的用途。</p><p><strong>语义化标签</strong>:</p><ul><li><code>header</code></li><li><code>nav</code></li><li><code>main</code></li><li><code>article</code></li><li><code>section</code></li><li><code>aside</code></li><li><code>footer</code></li></ul><p><strong>语义化的优点</strong>:</p><ul><li>在没有 CSS 样式的情况下，页面整体也会呈现很好的结构效果。</li><li>代码结构清晰，易于阅读。</li><li>有利于开发和维护，方便其他设备解析（如屏幕阅读器）根据语义渲染网页。</li><li>有利于搜索引擎优化（SEO），搜索引擎爬虫会根据不同的标签来赋予不同的权重。</li></ul><h2 id="html5-新特性" tabindex="-1">HTML5 新特性 <a class="header-anchor" href="#html5-新特性" aria-label="Permalink to &quot;HTML5 新特性&quot;">​</a></h2><p>HTML5引入了许多新特性，其中一些主要的特性包括：</p><ul><li>语义化标签</li><li>音视频处理 API (<code>audio</code>, <code>video</code>)</li><li><code>canvas</code> / <code>webGL</code></li><li>拖拽释放 (Drag and drop) API</li><li><code>history</code> API</li><li><code>requestAnimationFrame</code></li><li>地理位置 (Geolocation) API</li><li><code>webSocket</code></li><li>Web 存储 (<code>localStorage</code>, <code>SessionStorage</code>)</li><li>表单控件，如 <code>calendar</code>, <code>date</code>, <code>time</code>, <code>email</code>, <code>url</code>, <code>search</code></li></ul><h2 id="doctype-的作用是什么-chartai3-5" tabindex="-1">doctype 的作用是什么？ - ChartAI3.5 <a class="header-anchor" href="#doctype-的作用是什么-chartai3-5" aria-label="Permalink to &quot;doctype 的作用是什么？ - ChartAI3.5&quot;">​</a></h2><p>文档类型（DOCTYPE）是一种特殊的声明，它用于告知 web 浏览器如何解释一个 HTML 文档。它通常出现在 HTML 文档的开头，并以 <code>&lt;!DOCTYPE&gt;</code> 开始。文档类型声明的主要作用是：</p><ol><li><p><strong>指定文档类型</strong>: DOCTYPE 声明指定了文档所使用的 HTML 或 XHTML 的版本，以便浏览器能够正确解释文档的内容和结构。</p></li><li><p><strong>激活标准模式</strong>: 通过指定正确的 DOCTYPE，开发者可以确保浏览器以标准模式呈现页面，这意味着浏览器将遵守 W3C 标准来解释和呈现文档，以确保一致性和可预测性。</p></li><li><p><strong>避免怪异模式</strong>: 如果没有正确的 DOCTYPE 声明或使用不正确的声明，浏览器可能会进入怪异模式，这可能导致页面在不同浏览器中呈现不一致或出现错误。</p></li></ol><h2 id="浏览器标准模式、几乎标准模式和怪异模式之间的区别是什么-chartai3-5" tabindex="-1">浏览器标准模式、几乎标准模式和怪异模式之间的区别是什么？ - ChartAI3.5 <a class="header-anchor" href="#浏览器标准模式、几乎标准模式和怪异模式之间的区别是什么-chartai3-5" aria-label="Permalink to &quot;浏览器标准模式、几乎标准模式和怪异模式之间的区别是什么？ - ChartAI3.5&quot;">​</a></h2><p>浏览器标准模式、几乎标准模式和怪异模式是浏览器在解释 HTML 文档时的不同呈现模式。它们的区别如下：</p><ol><li><p><strong>标准模式（Standards Mode）</strong>:</p><ul><li>触发条件：当文档包含正确的 DOCTYPE 声明时，浏览器进入标准模式。</li><li>表现：在标准模式下，浏览器会尽力按照当前 HTML 和 CSS 标准来解释文档，以确保一致性和可预测性。</li><li>推荐使用：标准模式是开发者推荐的模式，因为它有助于确保网页在不同浏览器中一致呈现。</li></ul></li><li><p><strong>几乎标准模式（Almost Standards Mode）</strong>:</p><ul><li>触发条件：当文档包含某些不标准但常见的 HTML 或 CSS 代码时，浏览器可能进入几乎标准模式。</li><li>表现：几乎标准模式尝试在一些常见的不标准情况下仍然以标准模式来解释文档，以减少不一致性。</li><li>推荐使用：虽然不推荐使用不标准的代码，但几乎标准模式有助于适应一些旧的网页。</li></ul></li><li><p><strong>怪异模式（Quirks Mode）</strong>:</p><ul><li>触发条件：如果文档不包含正确的 DOCTYPE 或包含非常不标准的代码，浏览器可能进入怪异模式。</li><li>表现：怪异模式下，浏览器会尝试以一种更宽容的方式来解释文档，以模仿旧版本的浏览器行为。</li><li>推荐使用：怪异模式通常不推荐使用，因为它可能导致页面在不同浏览器中呈现不一致。</li></ul></li></ol><h2 id="html-和-xhtml-有什么区别-chartai3-5" tabindex="-1">HTML 和 XHTML 有什么区别？ - ChartAI3.5 <a class="header-anchor" href="#html-和-xhtml-有什么区别-chartai3-5" aria-label="Permalink to &quot;HTML 和 XHTML 有什么区别？ - ChartAI3.5&quot;">​</a></h2><p>HTML（Hypertext Markup Language）和 XHTML（Extensible Hypertext Markup Language）都是用于描述和组织网页内容的标记语言，但它们有一些重要区别：</p><ol><li><p><strong>语法要求</strong>:</p><ul><li>HTML 的语法相对宽松，允许一些不规范的代码，如未闭合的标签。</li><li>XHTML 的语法要求更严格，必须遵循 XML 规范，要求所有标签都必须正确嵌套和闭合。</li></ul></li><li><p><strong>大小写敏感</strong>:</p><ul><li>HTML 对标签名不区分大小写，可以使用大写或小写。</li><li>XHTML 对标签名区分大小写，必须使用小写字母。</li></ul></li><li><p><strong>文档结构</strong>:</p><ul><li>HTML 允许某些自闭合标签（如 <code>&lt;br&gt;</code>），但也允许在某些情况下省略闭合标签。</li><li>XHTML 要求所有标签都必须正确闭合，自闭合标签必须以 <code>&lt;tag /&gt;</code> 的形式闭合。</li></ul></li><li><p><strong>错误处理</strong>:</p><ul><li>HTML 在解析文档时会容忍一些错误，并尝试渲染页面，即使存在语法错误也可以显示页面。</li><li>XHTML 对错误非常敏感，一旦发现错误，浏览器可能无法正确显示页面。</li></ul></li><li><p><strong>媒体类型</strong>:</p><ul><li>HTML 通常使用 <code>text/html</code> 作为媒体类型。</li><li>XHTML 通常使用 <code>application/xhtml+xml</code> 或 <code>application/xml</code> 作为媒体类型。</li></ul></li></ol><p>总之，XHTML 更严格、更规范，并遵循 XML 格式，而HTML则更宽松。选择使用哪种标记语言取决于项目需求和开发团队的偏好。</p><h2 id="如果页面使用-application-xhtml-xml-会有什么问题吗-chartai3-5" tabindex="-1">如果页面使用 ‘application/xhtml+xml’ 会有什么问题吗？ - ChartAI3.5 <a class="header-anchor" href="#如果页面使用-application-xhtml-xml-会有什么问题吗-chartai3-5" aria-label="Permalink to &quot;如果页面使用 ‘application/xhtml+xml’ 会有什么问题吗？ - ChartAI3.5&quot;">​</a></h2><p>使用 &#39;application/xhtml+xml&#39; 作为文档的媒体类型会导致一些重要问题：</p><ol><li><p><strong>严格的XML语法要求</strong>: &#39;application/xhtml+xml&#39; 媒体类型要求文档遵循严格的XML语法，包括标签的正确嵌套和闭合，大小写敏感等。这意味着即使是小的语法错误也会导致页面无法正常渲染，而且会在浏览器中引发错误。</p></li><li><p><strong>兼容性问题</strong>: 大多数现代浏览器将 &#39;application/xhtml+xml&#39; 视为 XML，而不是 HTML，这可能导致一些HTML特性和JavaScript的不正常工作。因此，这种媒体类型在现实世界的网页开发中不常见。</p></li><li><p><strong>较慢的加载速度</strong>: &#39;application/xhtml+xml&#39; 文档通常会导致较慢的加载速度，因为浏览器必须以XML方式解析文档，这比解析HTML要更复杂。</p></li><li><p><strong>不利于SEO</strong>: 使用 &#39;application/xhtml+xml&#39; 可能会导致搜索引擎优化（SEO）问题，因为搜索引擎通常更喜欢处理HTML文档。</p></li></ol><p>一般情况下，除非有特定的需求，推荐使用 &#39;text/html&#39; 作为媒体类型，因为它更通用、兼容性更好，且更容易在各种浏览器和环境中工作。</p><h2 id="如果网页内容需要支持多语言-你会怎么做-chartai3-5" tabindex="-1">如果网页内容需要支持多语言，你会怎么做？ - ChartAI3.5 <a class="header-anchor" href="#如果网页内容需要支持多语言-你会怎么做-chartai3-5" aria-label="Permalink to &quot;如果网页内容需要支持多语言，你会怎么做？ - ChartAI3.5&quot;">​</a></h2><p>支持多语言的网页设计需要考虑以下要点：</p><ol><li><p><strong>字符编码</strong>: 使用 UTF-8 字符编码以支持多种语言中的特殊字符。</p></li><li><p><strong>多语言文本</strong>: 所有文本内容都应该被提供多语言版本。这可以通过文本翻译和国际化（i18n）库来实现。</p></li><li><p><strong>HTML 标记和属性</strong>: 使用 lang 属性来标识不同语言的文本，以帮助屏幕阅读器和搜索引擎理解页面内容。</p></li><li><p><strong>方向性</strong>: 对于从右到左的语言（如阿拉伯语、希伯来语），确保正确的文本方向，可以使用 <code>dir</code> 属性。</p></li><li><p><strong>URL 国际化</strong>: 使用国际化域名（Internationalized Domain Names，IDN）以支持多语言URL。</p></li><li><p><strong>图像和媒体</strong>: 提供多语言版本的图像和媒体文件，或者使用图像翻译技术。</p></li><li><p><strong>导航和菜单</strong>: 提供多语言的导航标签和菜单项。</p></li><li><p><strong>语言切换</strong>: 提供用户切换语言的选项，通常是在页面的顶部或底部。</p></li><li><p><strong>响应式设计</strong>: 确保多语言页面在不同设备和屏幕尺寸上都能正常显示。</p></li><li><p><strong>测试和本地化</strong>: 在不同语言的用户群体中进行测试和本地化，以确保网页在各种语言环境下都能正常工作。</p></li></ol><h2 id="在设计和开发多语言网站时-有哪些问题你必须要考虑-chartai3-5" tabindex="-1">在设计和开发多语言网站时，有哪些问题你必须要考虑？ - ChartAI3.5 <a class="header-anchor" href="#在设计和开发多语言网站时-有哪些问题你必须要考虑-chartai3-5" aria-label="Permalink to &quot;在设计和开发多语言网站时，有哪些问题你必须要考虑？ - ChartAI3.5&quot;">​</a></h2><p>在设计和开发多语言网站时，需要考虑以下问题：</p><ol><li><p><strong>文本翻译</strong>: 提供多语言版本的文本，确保翻译的准确性和一致性。</p></li><li><p><strong>字符编码</strong>: 使用适当的字符编码（通常是UTF-8）以支持各种语言中的特殊字符。</p></li><li><p><strong>语言和文化差异</strong>: 考虑不同语言和文化的书写方向、日期格式、货币符号等差异。</p></li><li><p><strong>SEO优化</strong>: 针对每种语言进行SEO优化，包括关键词研究和元标记翻译。</p></li><li><p><strong>URL国际化</strong>: 使用国际化域名（IDN）或路径来支持多语言URL。</p></li><li><p><strong>图像和媒体</strong>: 提供多语言版本的图像和媒体，或者使用图像翻译技术。</p></li><li><p><strong>导航和菜单</strong>: 提供多语言版本的导航标签和菜单项。</p></li><li><p><strong>语言切换</strong>: 提供用户切换语言的选项，通常是在页面的顶部或底部。</p></li><li><p><strong>响应式设计</strong>: 确保多语言页面在不同设备和屏幕尺寸上都能正常显示。</p></li><li><p><strong>本地化</strong>: 考虑不同国家和地区的法规、文化和法律要求，包括隐私政策和条款与条件。</p></li><li><p><strong>性能优化</strong>: 确保多语言页面的性能仍然良好，考虑使用内容传递网络（CDN）等技术。</p></li><li><p><strong>测试和本地化</strong>: 在不同语言的用户群体中进行测试和本地化，以确保网页在各种语言环境下都能正常工作。</p></li></ol><h2 id="使用-data-属性的好处是什么-chartai3-5" tabindex="-1">使用 data- 属性的好处是什么？ - ChartAI3.5 <a class="header-anchor" href="#使用-data-属性的好处是什么-chartai3-5" aria-label="Permalink to &quot;使用 data- 属性的好处是什么？ - ChartAI3.5&quot;">​</a></h2><p><code>data-</code> 属性是HTML5中引入的一种自定义数据属性，用于在HTML元素上存储自定义数据。这些属性的好处包括：</p><ol><li><p><strong>语义化</strong>: <code>data-</code> 属性使开发者能够将自定义数据与特定元素相关联，增加了文档的语义化。这使得文档更容易理解和维护。</p></li><li><p><strong>无需额外标记</strong>: 使用 <code>data-</code> 属性，开发者无需引入额外的元素或属性来存储自定义数据。这减少了HTML的冗余，使文档更简洁。</p></li><li><p><strong>易于访问和修改</strong>: JavaScript可以轻松访问和修改 <code>data-</code> 属性的值。这使得开发者能够动态地操作元素的自定义数据。</p></li><li><p><strong>与CSS结合</strong>: <code>data-</code> 属性可以与CSS选择器结合使用，使样式与特定数据相关联，提高了样式的灵活性。</p></li><li><p><strong>减少命名冲突</strong>: 由于 <code>data-</code> 属性的名称是自定义的，它们不容易与其他开发者创建的属性或标准HTML属性发生冲突。</p></li></ol><p>示例：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;product&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">data-product-id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;123&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">data-category</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;electronics&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">h2</span><span style="color:#E1E4E8;">&gt;Smartphone&lt;/</span><span style="color:#85E89D;">h2</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;High-quality smartphone with advanced features.&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;product&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">data-product-id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;123&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">data-category</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;electronics&quot;</span><span style="color:#24292E;">&gt;</span></span>\n<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">h2</span><span style="color:#24292E;">&gt;Smartphone&lt;/</span><span style="color:#22863A;">h2</span><span style="color:#24292E;">&gt;</span></span>\n<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;High-quality smartphone with advanced features.&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>\n<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>在这个示例中，<code>data-</code> 属性用于存储产品的自定义数据，如产品ID和类别。这些数据可以在JavaScript中轻松访问和操作，而不会干扰其他标准属性。</p><h2 id="如果把-html5-看作做一个开放平台-那它的构建模块有哪些-chartai3-5" tabindex="-1">如果把 HTML5 看作做一个开放平台，那它的构建模块有哪些？ - ChartAI3.5 <a class="header-anchor" href="#如果把-html5-看作做一个开放平台-那它的构建模块有哪些-chartai3-5" aria-label="Permalink to &quot;如果把 HTML5 看作做一个开放平台，那它的构建模块有哪些？ - ChartAI3.5&quot;">​</a></h2><p>HTML5 可以被看作是一个开放的网络平台，为创建多媒体内容、应用程序和交互性网站提供了广泛的功能。它的构建模块包括：</p><ol><li><p><strong>文本和语义模块</strong>：</p><ul><li><code>&lt;header&gt;</code>：定义文档或节的页眉。</li><li><code>&lt;footer&gt;</code>：定义文档或节的页脚。</li><li><code>&lt;nav&gt;</code>：定义导航链接的部分。</li><li><code>&lt;article&gt;</code>：定义独立的、可独立分配的内容。</li><li><code>&lt;section&gt;</code>：定义文档中的一个节或部分。</li><li><code>&lt;aside&gt;</code>：定义与页面内容无直接关联的内容（例如侧边栏）。</li><li><code>&lt;hgroup&gt;</code>：定义标题的组合。</li></ul></li><li><p><strong>多媒体模块</strong>：</p><ul><li><code>&lt;audio&gt;</code>：用于嵌入音频内容。</li><li><code>&lt;video&gt;</code>：用于嵌入视频内容。</li><li><code>&lt;canvas&gt;</code>：用于绘制图形和动画。</li><li><code>&lt;svg&gt;</code>：用于创建可伸缩矢量图形。</li></ul></li><li><p><strong>表单模块</strong>：</p><ul><li><code>&lt;form&gt;</code>：定义表单。</li><li><code>&lt;input&gt;</code>：定义输入字段。</li><li><code>&lt;textarea&gt;</code>：定义文本输入字段。</li><li><code>&lt;select&gt;</code>：定义选择列表。</li><li><code>&lt;label&gt;</code>：定义表单元素的标签。</li><li><code>&lt;button&gt;</code>：定义按钮。</li></ul></li><li><p><strong>API 模块</strong>：</p><ul><li>Geolocation API：用于获取用户的地理位置信息。</li><li>Web Storage：用于客户端存储。</li><li>WebSocket API：用于实现双向通信。</li><li>Web Workers：用于在后台运行脚本。</li><li>File API：用于访问本地文件系统。</li><li>Web Audio API：用于处理和生成音频数据。</li></ul></li><li><p><strong>样式和布局模块</strong>：</p><ul><li>CSS3：新的样式规则和特性，包括过渡、动画和变形。</li><li>Flexbox：用于更灵活的布局。</li><li>Grid Layout：用于网格布局。</li></ul></li><li><p><strong>交互性模块</strong>：</p><ul><li><code>&lt;details&gt;</code>：定义可打开/关闭的细节内容。</li><li><code>&lt;summary&gt;</code>：定义 <code>&lt;details&gt;</code> 元素的摘要。</li></ul></li><li><p><strong>存储和离线模块</strong>：</p><ul><li>Application Cache：用于创建离线应用。</li><li>IndexedDB：用于客户端数据库存储。</li><li>Local Storage 和 Session Storage：用于本地存储数据。</li></ul></li><li><p><strong>其他模块</strong>：</p><ul><li>Web Components：用于创建可重用的自定义HTML元素。</li><li>WebRTC：用于实时通信。</li><li>Server-Sent Events：用于服务器向客户端推送事件。</li></ul></li></ol><p>这些模块使HTML5成为一个强大的开发平台，可以用于创建各种类型的应用程序和内容。不同的模块可以相互结合使用，以实现丰富的用户体验和功能。</p><h2 id="请描述-cookies、sessionstorage-和-localstorage-的区别。-chartai3-5" tabindex="-1">请描述 cookies、sessionStorage 和 localStorage 的区别。 - ChartAI3.5 <a class="header-anchor" href="#请描述-cookies、sessionstorage-和-localstorage-的区别。-chartai3-5" aria-label="Permalink to &quot;请描述 cookies、sessionStorage 和 localStorage 的区别。 - ChartAI3.5&quot;">​</a></h2><ul><li><p><strong>Cookies</strong>:</p><ul><li>用途：Cookies 用于在客户端和服务器之间存储小段文本数据，通常用于跟踪用户会话、身份验证和持久性数据。</li><li>存储容量：Cookies 存储容量较小，通常限制在几KB。</li><li>生命周期：Cookies 可以具有指定的过期时间，也可以是会话级别的（在浏览器关闭时失效）。</li><li>存储位置：Cookies 存储在客户端，并随每个HTTP请求发送到服务器。</li></ul></li><li><p><strong>sessionStorage</strong>:</p><ul><li>用途：sessionStorage 用于在会话期间存储数据，即在浏览器标签或窗口开启的情况下有效。</li><li>存储容量：sessionStorage 存储容量较大，通常限制在几MB。</li><li>生命周期：sessionStorage 数据在会话结束时自动销毁。</li><li>存储位置：sessionStorage 存储在客户端，不会发送到服务器。</li></ul></li><li><p><strong>localStorage</strong>:</p><ul><li>用途：localStorage 用于永久性地在客户端存储数据，即使浏览器关闭后也有效。</li><li>存储容量：localStorage 存储容量也较大，通常限制在几MB。</li><li>生命周期：localStorage 数据不会自动销毁，除非明确删除。</li><li>存储位置：localStorage 存储在客户端，不会发送到服务器。</li></ul></li></ul><h2 id="请解释-script-、-script-async-和-script-defer-的区别。-chartai3-5" tabindex="-1">请解释 <code>&lt;script&gt;</code>、<code>&lt;script async&gt;</code> 和 <code>&lt;script defer&gt;</code> 的区别。 - ChartAI3.5 <a class="header-anchor" href="#请解释-script-、-script-async-和-script-defer-的区别。-chartai3-5" aria-label="Permalink to &quot;请解释 `&lt;script&gt;`、`&lt;script async&gt;` 和 `&lt;script defer&gt;` 的区别。 - ChartAI3.5&quot;">​</a></h2><ul><li><p><strong><code>&lt;script&gt;</code></strong>:</p><ul><li>默认行为：<code>&lt;script&gt;</code> 元素会按照页面的顺序下载和执行，它会阻止页面的渲染，直到脚本加载和执行完毕。</li><li>用途：通常用于在文档中嵌入脚本，脚本的加载和执行会阻塞页面渲染。</li></ul></li><li><p><strong><code>&lt;script async&gt;</code></strong>:</p><ul><li>默认行为：<code>&lt;script async&gt;</code> 元素会异步下载脚本，不会阻止页面的渲染，脚本加载和执行是并行的。</li><li>用途：适用于不依赖于页面结构和其他脚本的脚本，可以在页面加载时并行下载和执行。</li></ul></li><li><p><strong><code>&lt;script defer&gt;</code></strong>:</p><ul><li>默认行为：<code>&lt;script defer&gt;</code> 元素也会异步下载脚本，但它会在文档解析完毕后、<code>DOMContentLoaded</code> 事件之前执行脚本。</li><li>用途：适用于需要等待页面文档解析完成后再执行的脚本，可以确保脚本在文档结构就绪后执行。</li></ul></li></ul><p>总之，<code>&lt;script&gt;</code> 阻塞渲染，<code>&lt;script async&gt;</code> 异步下载和执行，<code>&lt;script defer&gt;</code> 异步下载但延迟执行。根据脚本的依赖和执行时机，可以选择适当的标签属性。</p><h2 id="为什么通常推荐将-css-link-放置在-head-head-之间-而将-js-script-放置在-body-之前-你知道有哪些例外吗-chartai3-5" tabindex="-1">为什么通常推荐将 CSS <code>&lt;link&gt;</code> 放置在 <code>&lt;head&gt;&lt;/head&gt;</code> 之间，而将 JS <code>&lt;script&gt;</code> 放置在 <code>&lt;/body&gt;</code> 之前？你知道有哪些例外吗？ - ChartAI3.5 <a class="header-anchor" href="#为什么通常推荐将-css-link-放置在-head-head-之间-而将-js-script-放置在-body-之前-你知道有哪些例外吗-chartai3-5" aria-label="Permalink to &quot;为什么通常推荐将 CSS `&lt;link&gt;` 放置在 `&lt;head&gt;&lt;/head&gt;` 之间，而将 JS `&lt;script&gt;` 放置在 `&lt;/body&gt;` 之前？你知道有哪些例外吗？ - ChartAI3.5&quot;">​</a></h2><p>通常将 CSS <code>&lt;link&gt;</code> 放置在 <code>&lt;head&gt;</code> 之间的原因是为了实现更好的性能和用户体验：</p><ul><li><p><strong>CSS加载和渲染</strong>：将CSS放在<code>&lt;head&gt;</code>内，可以确保浏览器在渲染页面内容之前加载和应用CSS样式，从而避免了无样式内容的瞬间闪烁。</p></li><li><p><strong>防止渲染阻塞</strong>：如果将CSS放在<code>&lt;body&gt;</code>内，浏览器可能会在加载和应用CSS时暂停渲染，导致页面加载延迟。</p></li><li><p><strong>样式优先</strong>：将CSS放在<code>&lt;head&gt;</code>内，使得样式可以立即应用于页面，提高了用户的感知速度。</p></li></ul><p>但也有一些例外情况，可以将JS <code>&lt;script&gt;</code> 放在<code>&lt;/body&gt;</code>之前：</p><ul><li><p><strong>性能优化</strong>：为了提高性能，有时可以将不必要执行的脚本放在页面底部，以确保首次渲染不受脚本加载和执行的阻塞。这对于大型应用程序可能特别有帮助。</p></li><li><p><strong>异步加载</strong>：使用<code>async</code>或<code>defer</code>属性的脚本可以异步加载，因此它们不会阻塞页面的渲染。在这种情况下，将它们放在<code>&lt;body&gt;</code>底部是合理的。</p></li><li><p><strong>按需加载</strong>：一些脚本可能只在特定条件下才需要加载。在这种情况下，可以动态地将脚本插入到<code>&lt;body&gt;</code>中，以提高性能和资源利用率。</p></li></ul><p>综上所述，放置CSS在<code>&lt;head&gt;</code>中通常是标准实践，而放置JS在<code>&lt;/body&gt;</code>之前取决于页面的具体需求和性能优化策略。</p><h2 id="什么是渐进式渲染-progressive-rendering-chartai3-5" tabindex="-1">什么是渐进式渲染 (progressive rendering)? - ChartAI3.5 <a class="header-anchor" href="#什么是渐进式渲染-progressive-rendering-chartai3-5" aria-label="Permalink to &quot;什么是渐进式渲染 (progressive rendering)? - ChartAI3.5&quot;">​</a></h2><p>渐进式渲染是一种网页加载和呈现的策略，旨在提供更好的用户体验。它强调在页面加载过程中逐步显示内容，而不是等待整个页面完全加载后再显示。这有助于减少用户感知的加载时间。</p><p>要实现渐进式渲染，可以采取以下措施：</p><p>1.<strong>逐步加载内容</strong>：页面应该逐步显示内容，即使部分内容尚未完全加载。例如，文本和图片应该逐渐出现，而不是等待所有内容都准备好后再显示。</p><p>2.<strong>优化图片</strong>：使用逐步加载图像（progressive JPEG）或占位符图像，以在图像加载时提供占位，而不是显示空白。</p><p>3.<strong>延迟加载资源</strong>：将非关键资源，如某些脚本和样式表，标记为异步加载或延迟加载，以确保页面主要内容首先呈现。</p><p>4.<strong>分块内容</strong>：将页面内容划分为多个块，每个块具有自己的渲染优先级，以确保首屏内容首先加载和呈现。</p><p>5.<strong>使用浏览器缓存</strong>：利用浏览器缓存机制，以便在用户再次访问时更快地加载页面。</p><p>渐进式渲染有助于改善用户的感知速度，减少加载时间的焦虑，并提供更流畅的用户体验。这在移动设备和较慢的网络连接下尤为重要。</p>',61),s=[i];function r(n,p,c,d,g,h){return o(),t("div",null,s)}const y=l(e,[["render",r]]);export{E as __pageData,y as default};
