import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.aea2adc8.js";const b=JSON.parse('{"title":"网络复习 - ChartAI","description":"","frontmatter":{},"headers":[],"relativePath":"guide/computer/network/review1.md","filePath":"guide/computer/network/review1.md","lastUpdated":1699000995000}'),p={name:"guide/computer/network/review1.md"},e=l(`<h1 id="网络复习-chartai" tabindex="-1">网络复习 - ChartAI <a class="header-anchor" href="#网络复习-chartai" aria-label="Permalink to &quot;网络复习 - ChartAI&quot;">​</a></h1><h2 id="为什么传统上利用多个域名来提供网站资源会更有效" tabindex="-1">为什么传统上利用多个域名来提供网站资源会更有效？ <a class="header-anchor" href="#为什么传统上利用多个域名来提供网站资源会更有效" aria-label="Permalink to &quot;为什么传统上利用多个域名来提供网站资源会更有效？&quot;">​</a></h2><p>在早期的网络应用和浏览器中，浏览器对于单个域名的并发请求是有限制的。当网站的内容主要由图像、样式表、脚本等资源组成时，如果所有资源都来自同一域名，那么加载的速度可能会受到限制。通过使用多个域名（或称为子域名、CDN域名等）来提供资源，浏览器可以并发地从不同的域名加载资源，从而提高页面的加载速度。</p><p>例如，浏览器可能对一个域名只允许6个并发连接。这意味着，如果一个页面有12个资源需要加载，那么在使用单个域名时，它们需要分两批进行加载。但是，如果这些资源被分散到两个域名上，那么浏览器可以同时从两个域名加载所有12个资源。</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 使用单个域名 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">img</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">src</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;https://example.com/image1.jpg&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">img</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">src</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;https://example.com/image2.jpg&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 使用多个域名 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">img</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">src</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;https://cdn1.example.com/image1.jpg&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">img</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">src</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;https://cdn2.example.com/image2.jpg&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 使用单个域名 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">img</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;https://example.com/image1.jpg&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">img</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;https://example.com/image2.jpg&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 使用多个域名 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">img</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;https://cdn1.example.com/image1.jpg&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">img</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;https://cdn2.example.com/image2.jpg&quot;</span><span style="color:#24292E;"> /&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>但值得注意的是，现代浏览器已经提高了对单个域名的并发请求限制，而且随着HTTP/2和HTTP/3的普及，多个资源可以在单个连接上并行加载，所以这个策略可能不再那么重要。</p><h2 id="从输入-url-到整个网页加载完毕及显示在屏幕上的整个流程" tabindex="-1">从输入 URL 到整个网页加载完毕及显示在屏幕上的整个流程 <a class="header-anchor" href="#从输入-url-到整个网页加载完毕及显示在屏幕上的整个流程" aria-label="Permalink to &quot;从输入 URL 到整个网页加载完毕及显示在屏幕上的整个流程&quot;">​</a></h2><ol><li><p><strong>URL 输入</strong>: 用户在浏览器的地址栏输入一个URL。</p></li><li><p><strong>DNS 解析</strong>: 浏览器需要知道目标服务器的IP地址来获取网页资源。为此，浏览器会查询域名系统（DNS）来解析URL中的域名为对应的IP地址。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> socket</span></span>
<span class="line"><span style="color:#E1E4E8;">ip_address </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> socket.gethostbyname(</span><span style="color:#9ECBFF;">&#39;example.com&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> socket</span></span>
<span class="line"><span style="color:#24292E;">ip_address </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> socket.gethostbyname(</span><span style="color:#032F62;">&#39;example.com&#39;</span><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p><strong>建立连接</strong>: 浏览器与服务器建立一个TCP连接（对于HTTPS，这还涉及到SSL/TLS握手过程）。</p></li><li><p><strong>发送 HTTP 请求</strong>: 浏览器通过已建立的连接发送一个HTTP GET请求，要求服务器返回URL对应的资源。</p><div class="language-http vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">GET</span><span style="color:#E1E4E8;"> /index.html </span><span style="color:#F97583;">HTTP</span><span style="color:#E1E4E8;">/</span><span style="color:#79B8FF;">1.1</span></span>
<span class="line"><span style="color:#85E89D;">Host</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">example.com</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">GET</span><span style="color:#24292E;"> /index.html </span><span style="color:#D73A49;">HTTP</span><span style="color:#24292E;">/</span><span style="color:#005CC5;">1.1</span></span>
<span class="line"><span style="color:#22863A;">Host</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">example.com</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p><strong>服务器处理</strong>: 服务器收到请求后，可能会查询数据库、运行脚本或执行其他操作来生成或获取请求的资源。</p></li><li><p><strong>发送 HTTP 响应</strong>: 服务器返回一个HTTP响应，其中包含资源的内容和其他相关的头信息。</p><div class="language-http vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">HTTP/1.1 200 OK</span></span>
<span class="line"><span style="color:#85E89D;">Content-Type</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">text/html</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">html</span><span style="color:#E1E4E8;">&gt;...&lt;/</span><span style="color:#85E89D;">html</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">HTTP/1.1 200 OK</span></span>
<span class="line"><span style="color:#22863A;">Content-Type</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">text/html</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">html</span><span style="color:#24292E;">&gt;...&lt;/</span><span style="color:#22863A;">html</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p><strong>渲染页面</strong>: 浏览器开始解析和渲染HTML内容。在此过程中，浏览器可能会发现需要从其他来源加载的资源（如图像、CSS、JavaScript文件）。对于这些资源，浏览器会重复上述的请求和接收过程。</p></li><li><p><strong>执行脚本</strong>: 如果页面包含JavaScript，浏览器会执行它，这可能会导致页面的进一步更新或更多的资源请求。</p></li><li><p><strong>完成加载</strong>: 当所有的资源都被加载和渲染，页面会被完全显示在屏幕上，此时浏览器的加载指示器（如进度条或旋转的图标）会消失。</p></li></ol><p>此流程可能因浏览器、服务器配置和其他因素而略有不同，但大体上的步骤是相似的。</p><h2 id="long-polling、websockets-和-server-sent-event-之间有什么区别" tabindex="-1">Long-Polling、WebSockets 和 Server-Sent Event 之间有什么区别？ <a class="header-anchor" href="#long-polling、websockets-和-server-sent-event-之间有什么区别" aria-label="Permalink to &quot;Long-Polling、WebSockets 和 Server-Sent Event 之间有什么区别？&quot;">​</a></h2><h3 id="long-polling" tabindex="-1">Long-Polling <a class="header-anchor" href="#long-polling" aria-label="Permalink to &quot;Long-Polling&quot;">​</a></h3><p>Long-Polling 是一种在 Web 应用中实现实时功能的技术。其基本思想是客户端发起一个到服务器的请求，并等待服务器的响应。当服务器有新的数据可用时，它会发送一个响应给客户端。客户端处理完这个响应后，会立即发起另一个请求，等待服务器的下一个响应。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">poll</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> xhr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">XMLHttpRequest</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  xhr.</span><span style="color:#B392F0;">open</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;GET&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;/server-data&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  xhr.</span><span style="color:#B392F0;">onload</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (xhr.status </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(xhr.responseText);</span></span>
<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(data);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 处理数据后再次轮询</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">poll</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">  xhr.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">poll</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">poll</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> xhr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">XMLHttpRequest</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  xhr.</span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;GET&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;/server-data&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  xhr.</span><span style="color:#6F42C1;">onload</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (xhr.status </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">200</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(xhr.responseText);</span></span>
<span class="line"><span style="color:#24292E;">      console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(data);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 处理数据后再次轮询</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">poll</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">  xhr.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">poll</span><span style="color:#24292E;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="websockets" tabindex="-1">WebSockets <a class="header-anchor" href="#websockets" aria-label="Permalink to &quot;WebSockets&quot;">​</a></h3><p>WebSockets 是一种在单个 TCP 连接上进行全双工通信的协议。它允许服务器和客户端之间进行双向通信，这意味着服务器可以在任何时候向客户端发送数据，而无需客户端首先发起请求。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> socket </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WebSocket</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;ws://example.com/socket-endpoint&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">socket.</span><span style="color:#B392F0;">onopen</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Connection opened&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  socket.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Hello, Server!&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">socket.</span><span style="color:#B392F0;">onmessage</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> event.data;</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Received from server:&#39;</span><span style="color:#E1E4E8;">, data);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">socket.</span><span style="color:#B392F0;">onclose</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Connection closed&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> socket </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WebSocket</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;ws://example.com/socket-endpoint&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">socket.</span><span style="color:#6F42C1;">onopen</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">event</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Connection opened&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  socket.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Hello, Server!&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">socket.</span><span style="color:#6F42C1;">onmessage</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">event</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> event.data;</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Received from server:&#39;</span><span style="color:#24292E;">, data);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">socket.</span><span style="color:#6F42C1;">onclose</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">event</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Connection closed&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="server-sent-event-sse" tabindex="-1">Server-Sent Event (SSE) <a class="header-anchor" href="#server-sent-event-sse" aria-label="Permalink to &quot;Server-Sent Event (SSE)&quot;">​</a></h3><p>SSE 也称为 EventSource，是一种只允许服务器向客户端发送数据的技术。与 WebSockets 不同，SSE 是单向的。它在一个持久的 HTTP 连接上工作，并使用标准的 HTTP 协议。这使得 SSE 在某些场景下，如只需要服务器到客户端的通信时，成为一个简单且有用的选择。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> evtSource </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EventSource</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/server-events&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">evtSource.</span><span style="color:#B392F0;">onmessage</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> event.data;</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Received from server:&#39;</span><span style="color:#E1E4E8;">, data);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">evtSource.</span><span style="color:#B392F0;">onerror</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;EventSource failed:&#39;</span><span style="color:#E1E4E8;">, event);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> evtSource </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EventSource</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/server-events&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">evtSource.</span><span style="color:#6F42C1;">onmessage</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">event</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> event.data;</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Received from server:&#39;</span><span style="color:#24292E;">, data);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">evtSource.</span><span style="color:#6F42C1;">onerror</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">event</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;EventSource failed:&#39;</span><span style="color:#24292E;">, event);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ul><li><strong>区别总结</strong><ul><li><strong>Long-Polling</strong>：客户端发起请求，等待服务器的响应。当服务器有数据时，它会响应，然后客户端再发起新的请求。</li><li><strong>WebSockets</strong>：建立一个持久的、双向的连接，允许服务器和客户端之间相互发送数据。</li><li><strong>Server-Sent Event</strong>：只允许服务器向客户端发送数据的技术，在一个持久的 HTTP 连接上运作。</li></ul></li></ul><h2 id="request-和-response-headers" tabindex="-1">request 和 response headers <a class="header-anchor" href="#request-和-response-headers" aria-label="Permalink to &quot;request 和 response headers&quot;">​</a></h2><h3 id="diff-between-expires-date-age-and-if-modified" tabindex="-1">Diff. between Expires, Date, Age and If-Modified- <a class="header-anchor" href="#diff-between-expires-date-age-and-if-modified" aria-label="Permalink to &quot;Diff. between Expires, Date, Age and If-Modified-&quot;">​</a></h3><p>HTTP headers 是从服务器到浏览器或从浏览器到服务器传递信息的关键方式。以下是关于 <code>Expires</code>, <code>Date</code>, <code>Age</code> 和 <code>If-Modified-...</code> 这些头部的详细描述：</p><ol><li><p><strong>Expires</strong>:</p><ul><li><code>Expires</code> 响应头指明资源的过期日期和时间。浏览器可以在这个日期和时间之前，无需重新请求，直接从缓存中读取资源。</li><li>示例：<code>Expires: Wed, 21 Oct 2023 07:28:00 GMT</code></li></ul></li><li><p><strong>Date</strong>:</p><ul><li><code>Date</code> 响应头表示消息是什么时候被发送的。</li><li>示例：<code>Date: Tue, 17 Oct 2023 07:28:00 GMT</code></li></ul></li><li><p><strong>Age</strong>:</p><ul><li><code>Age</code> 响应头表示自原始服务器生成响应以来经过的时间（以秒为单位）。</li><li>示例：<code>Age: 12</code></li></ul></li><li><p><strong>If-Modified-Since / If-Modified-...</strong>:</p><ul><li><code>If-Modified-Since</code> 请求头使得客户端可以基于该资源上一次被修改的时间来请求该资源。这可以减少不必要的网络流量，因为只有在资源在上次获取后已被修改时，服务器才会返回新的资源。</li><li>示例：<code>If-Modified-Since: Sat, 29 Oct 2022 19:43:31 GMT</code></li></ul></li></ol><h3 id="do-not-track" tabindex="-1">Do Not Track <a class="header-anchor" href="#do-not-track" aria-label="Permalink to &quot;Do Not Track&quot;">​</a></h3><ul><li><code>Do Not Track</code> 请求头是一个浏览器可以设置的头，表示用户不希望其浏览行为被任何网站追踪。</li><li>示例：<code>DNT: 1</code> (1 表示不追踪)</li></ul><h3 id="cache-control" tabindex="-1">Cache-Control <a class="header-anchor" href="#cache-control" aria-label="Permalink to &quot;Cache-Control&quot;">​</a></h3><ul><li><code>Cache-Control</code> 响应头控制了浏览器和其他中间代理如何缓存和再验证响应。</li><li>示例：<code>Cache-Control: no-store, no-cache, must-revalidate</code></li></ul><h3 id="transfer-encoding" tabindex="-1">Transfer-Encoding <a class="header-anchor" href="#transfer-encoding" aria-label="Permalink to &quot;Transfer-Encoding&quot;">​</a></h3><ul><li><code>Transfer-Encoding</code> 响应头指明了消息体的传输编码方式。比如 &quot;chunked&quot; 表示数据是分块发送的。</li><li>示例：<code>Transfer-Encoding: chunked</code></li></ul><h3 id="etag" tabindex="-1">ETag <a class="header-anchor" href="#etag" aria-label="Permalink to &quot;ETag&quot;">​</a></h3><ul><li><code>ETag</code> 响应头提供了一个资源的版本标识，通常是内容的哈希值或版本号。配合 <code>If-None-Match</code> 请求头，它可以帮助浏览器判断缓存的资源是否仍然是最新的。</li><li>示例：<code>ETag: &quot;737060cd8c284d8af7ad3082f209582d&quot;</code></li></ul><h3 id="x-frame-options" tabindex="-1">X-Frame-Options <a class="header-anchor" href="#x-frame-options" aria-label="Permalink to &quot;X-Frame-Options&quot;">​</a></h3><ul><li><code>X-Frame-Options</code> 响应头可以用来指明浏览器应该如何处理一个网页中的 <code>&lt;frame&gt;</code>, <code>&lt;iframe&gt;</code>, <code>&lt;embed&gt;</code> 和 <code>&lt;applet&gt;</code> 元素。它可以防止点击劫持攻击。</li><li>示例：<code>X-Frame-Options: SAMEORIGIN</code></li></ul><h3 id="javascript-示例" tabindex="-1">JavaScript 示例 <a class="header-anchor" href="#javascript-示例" aria-label="Permalink to &quot;JavaScript 示例&quot;">​</a></h3><p>要在JavaScript中设置或获取这些头，您可以使用 XMLHttpRequest 或 Fetch API。以下是使用 Fetch API 的简单示例：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">fetch</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;https://example.com/api/resource&#39;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  headers: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;If-Modified-Since&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;Sat, 29 Oct 2022 19:43:31 GMT&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">response</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(response.headers.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;ETag&#39;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">catch</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">error</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Error fetching the resource:&#39;</span><span style="color:#E1E4E8;">, error);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">fetch</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;https://example.com/api/resource&#39;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">  headers: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;If-Modified-Since&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;Sat, 29 Oct 2022 19:43:31 GMT&#39;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">.</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span><span style="color:#E36209;">response</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(response.headers.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;ETag&#39;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">.</span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;">(</span><span style="color:#E36209;">error</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Error fetching the resource:&#39;</span><span style="color:#24292E;">, error);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>这个示例发送一个带有 <code>If-Modified-Since</code> 请求头的请求，并在响应中检索 <code>ETag</code> 头。</p><h2 id="http-method" tabindex="-1">HTTP Method <a class="header-anchor" href="#http-method" aria-label="Permalink to &quot;HTTP Method&quot;">​</a></h2><p>HTTP 方法是 HTTP 协议中定义的一套动作，用于表示要对给定的资源执行的操作。每次发送 HTTP 请求时，都会使用其中之一的方法。</p><p>以下是一些常见的 HTTP 方法以及它们的解释：</p><ol><li><p><strong>GET</strong>: 请求指定的资源。GET 请求只应从服务器检索数据，并且不应产生任何副作用。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">fetch</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/example&#39;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  method: </span><span style="color:#9ECBFF;">&#39;GET&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">fetch</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/example&#39;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">  method: </span><span style="color:#032F62;">&#39;GET&#39;</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p><strong>POST</strong>: 提交数据以由资源处理。常用于表单提交。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">fetch</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/example&#39;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  method: </span><span style="color:#9ECBFF;">&#39;POST&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  body: </span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">(data)</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">fetch</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/example&#39;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">  method: </span><span style="color:#032F62;">&#39;POST&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  body: </span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">(data)</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p><strong>PUT</strong>: 从客户端更新现有资源或创建新资源。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">fetch</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/example/resource-id&#39;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  method: </span><span style="color:#9ECBFF;">&#39;PUT&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  body: </span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">(data)</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">fetch</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/example/resource-id&#39;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">  method: </span><span style="color:#032F62;">&#39;PUT&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  body: </span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">(data)</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p><strong>DELETE</strong>: 请求删除指定的资源。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">fetch</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/example/resource-id&#39;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  method: </span><span style="color:#9ECBFF;">&#39;DELETE&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">fetch</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/example/resource-id&#39;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">  method: </span><span style="color:#032F62;">&#39;DELETE&#39;</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p><strong>PATCH</strong>: 对资源进行部分修改。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">fetch</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/example/resource-id&#39;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  method: </span><span style="color:#9ECBFF;">&#39;PATCH&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  body: </span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">(data)</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">fetch</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/example/resource-id&#39;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">  method: </span><span style="color:#032F62;">&#39;PATCH&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  body: </span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">(data)</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p><strong>HEAD</strong>: 与 GET 方法类似，但不返回消息体，只检索资源的元信息。</p></li><li><p><strong>OPTIONS</strong>: 返回服务器针对特定资源所支持的 HTTP 请求方法。</p></li><li><p><strong>CONNECT</strong>: 用于网络隧道。</p></li><li><p><strong>TRACE</strong>: 提供一个请求的回路测试路径。</p></li></ol><p>这些方法有时也被称为 HTTP 动词。每个方法明确指示了对资源的预期行为。</p><h2 id="http-status-301-与-302-的区别" tabindex="-1">HTTP Status 301 与 302 的区别 <a class="header-anchor" href="#http-status-301-与-302-的区别" aria-label="Permalink to &quot;HTTP Status 301 与 302 的区别&quot;">​</a></h2><p>HTTP 状态代码是由三位数字组成的，用于表示 Web 服务器处理请求的结果。特定的两个状态代码，301 和 302，与 URL 重定向相关。</p><ul><li><p><strong>301 Moved Permanently</strong>：这意味着请求的资源已被永久移动到另一个 URI，并且所有将来的引用都应使用其中返回的一些 URI。它可以用来将网站的旧 URL 永久转移到新的 URL。</p></li><li><p><strong>302 Found (HTTP/1.1) 或 Moved Temporarily (HTTP/1.0)</strong>：表示请求的资源目前位于另一个 URI 下，但可能在将来会改变。因此，客户端应该继续使用原有的 URI。</p></li></ul><h3 id="区别" tabindex="-1">区别 <a class="header-anchor" href="#区别" aria-label="Permalink to &quot;区别&quot;">​</a></h3><ol><li><strong>持久性</strong>：301 是永久移动，而 302 是临时移动。</li><li><strong>搜索引擎优化</strong>：从 SEO 的角度看，301 重定向意味着旧页面的“链接权重”或“页面权威”会转移到新的 URL，而 302 则不会。</li><li><strong>浏览器行为</strong>：在某些情况下，浏览器可能会缓存 301 重定向，而对于 302 重定向则不一定。</li></ol>`,48),o=[e];function r(t,c,i,E,y,d){return n(),a("div",null,o)}const h=s(p,[["render",r]]);export{b as __pageData,h as default};
