import{_ as s,o as a,c as n,Q as o}from"./chunks/framework.aea2adc8.js";const u=JSON.parse('{"title":"vue-router","description":"","frontmatter":{},"headers":[],"relativePath":"guide/frame/vue-router/review.md","filePath":"guide/frame/vue-router/review.md","lastUpdated":1709012768000}'),e={name:"guide/frame/vue-router/review.md"},l=o(`<h1 id="vue-router" tabindex="-1">vue-router <a class="header-anchor" href="#vue-router" aria-label="Permalink to &quot;vue-router&quot;">​</a></h1><h2 id="vue-router-路由模式有几种" tabindex="-1">vue-router 路由模式有几种？ <a class="header-anchor" href="#vue-router-路由模式有几种" aria-label="Permalink to &quot;vue-router 路由模式有几种？&quot;">​</a></h2><p><code>vue-router</code> 有 3 种路由模式：<strong>hash</strong>、<strong>history</strong>、<strong>abstract</strong>，对应的源码如下所示：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (mode) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;history&#39;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.history </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HTML5History</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, options.base)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">break</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;hash&#39;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.history </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HashHistory</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, options.base, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.fallback)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">break</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;abstract&#39;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.history </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AbstractHistory</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, options.base)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">break</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (p<wbr>rocess.env.</span><span style="color:#79B8FF;">NODE_ENV</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;production&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">assert</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">\`invalid mode: \${</span><span style="color:#E1E4E8;">mode</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (mode) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;history&#39;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.history </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HTML5History</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, options.base)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">break</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;hash&#39;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.history </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HashHistory</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, options.base, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.fallback)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">break</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;abstract&#39;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.history </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AbstractHistory</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, options.base)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">break</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">default</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (p<wbr>rocess.env.</span><span style="color:#005CC5;">NODE_ENV</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;production&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">assert</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#032F62;">\`invalid mode: \${</span><span style="color:#24292E;">mode</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>其中，3 种路由模式的说明如下：</p><ul><li><strong>hash</strong>: 使用 <code>URL hash</code> 值来作路由。支持所有浏览器，包括不支持 <code>HTML5 History Api</code> 的浏览器</li><li><strong>history</strong>: 依赖 <code>HTML5 History API</code> 和服务器配置。具体可以查看 <code>HTML5 History</code> 模式</li><li><strong>abstract</strong>: 支持所有 <code>JavaScript</code> 运行环境，如 <code>Node.js</code> 服务器端。如果发现没有浏览器的 <code>API</code>，路由会自动强制进入这个模式.</li></ul><h2 id="vue-router-中常用的-hash-和-history-路由模式实现原理吗" tabindex="-1">vue-router 中常用的 hash 和 history 路由模式实现原理吗？ <a class="header-anchor" href="#vue-router-中常用的-hash-和-history-路由模式实现原理吗" aria-label="Permalink to &quot;vue-router 中常用的 hash 和 history 路由模式实现原理吗？&quot;">​</a></h2><ul><li><strong>hash 模式的实现原理</strong></li></ul><p>早期的前端路由的实现就是基于 <code>location.hash</code> 来实现的。其实现原理很简单，<code>location.hash</code> 的值就是 <strong>URL</strong> 中 <strong>#</strong> 后面的内容。比如下面这个网站，它的 <code>location.hash</code> 的值为 &#39;#search&#39;：</p><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">https://www.word.com#search</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">https://www.word.com#search</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>hash</code> 路由模式的实现主要是基于下面几个特性：</p><ul><li><p><strong>URL</strong> 中 <code>hash</code> 值只是客户端的一种状态，也就是说当向服务器端发出请求时，<code>hash</code> 部分不会被发送</p></li><li><p><code>hash</code> 值的改变，都会在浏览器的访问历史中增加一个记录。因此我们能通过浏览器的回退、前进按钮控制 <code>hash</code> 的切换</p></li><li><p>可以通过 <code>a</code> 标签，并设置 <code>href</code> 属性，当用户点击这个标签后，<strong>URL</strong> 的 <code>hash</code> 值会发生改变；或者使用 <code>JavaScript</code> 来对 <code>location.hash</code> 进行赋值，改变 <strong>URL</strong> 的 <code>hash</code> 值</p></li><li><p>可以使用 <code>hashchange</code> 事件来监听 <code>hash</code> 值的变化，从而对页面进行跳转（渲染）</p></li><li><p><strong>history 模式的实现原理</strong></p></li></ul><p><strong>HTML5</strong> 提供了 <strong>History API</strong> 来实现 <strong>URL</strong> 的变化。其中做最主要的 <strong>API</strong> 有以下两个：<code>history.pushState()</code> 和 <code>history.replaceState()</code>。这两个 <strong>API</strong> 可以在不进行刷新的情况下，操作浏览器的历史纪录。唯一不同的是，前者是新增一个历史记录，后者是直接替换当前的历史记录，如下所示：</p><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">window.history.pushState(null, null, path);</span></span>
<span class="line"><span style="color:#e1e4e8;">window.history.replaceState(null, null, path);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">window.history.pushState(null, null, path);</span></span>
<span class="line"><span style="color:#24292e;">window.history.replaceState(null, null, path);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><code>history</code> 路由模式的实现主要基于存在下面几个特性：</p><ul><li><code>pushState</code> 和 <code>replaceState</code> 两个 <strong>API</strong> 来操作实现 <strong>URL</strong> 的变化</li><li>我们可以使用 <code>popstate</code> 事件来监听 <strong>url</strong> 的变化，从而对页面进行跳转（渲染）</li><li><code>history.pushState()</code> 或 <code>history.replaceState()</code> 不会触发 <code>popstate</code> 事件，这时我们需要手动触发页面跳转（渲染）</li></ul><h2 id="vue-router-路由钩子函数是什么-执行顺序是什么" tabindex="-1">vue-router 路由钩子函数是什么？执行顺序是什么？ <a class="header-anchor" href="#vue-router-路由钩子函数是什么-执行顺序是什么" aria-label="Permalink to &quot;vue-router 路由钩子函数是什么？执行顺序是什么？&quot;">​</a></h2><p>路由钩子的执行流程, 钩子函数种类有: <strong>全局守卫</strong>、<strong>路由守卫</strong>、<strong>组件守卫</strong></p><p>完整的导航解析流程:</p><ol><li>导航被触发</li><li>在失活的组件里调用 <code>beforeRouteLeave</code> 守卫</li><li>调用全局的 <code>beforeEach</code> 守卫</li><li>在重用的组件里调用 <code>beforeRouteUpdate</code> 守卫 (2.2+)</li><li>在路由配置里调用 <code>beforeEnter</code></li><li>解析异步路由组件</li><li>在被激活的组件里调用 <code>beforeRouteEnter</code></li><li>调用全局的 <code>beforeResolve</code> 守卫 (2.5+)</li><li>导航被确认</li><li>调用全局的 <code>afterEach</code> 钩子</li><li>触发 <code>DOM</code> 更新</li><li>调用 <code>beforeRouteEnter</code> 守卫中传给 <code>next</code> 的回调函数，创建好的组件实例会作为回调函数的参数传入。</li></ol>`,20),p=[l];function t(r,c,i,y,E,d){return a(),n("div",null,p)}const b=s(e,[["render",t]]);export{u as __pageData,b as default};
