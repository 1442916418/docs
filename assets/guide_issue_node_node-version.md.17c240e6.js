import{_ as s,o as n,c as a,Q as e}from"./chunks/framework.aea2adc8.js";const b=JSON.parse('{"title":"团队如何巧妙统一 Node 版本？","description":"","frontmatter":{},"headers":[],"relativePath":"guide/issue/node/node-version.md","filePath":"guide/issue/node/node-version.md","lastUpdated":1710047191000}'),p={name:"guide/issue/node/node-version.md"},o=e(`<h1 id="团队如何巧妙统一-node-版本" tabindex="-1">团队如何巧妙统一 Node 版本？ <a class="header-anchor" href="#团队如何巧妙统一-node-版本" aria-label="Permalink to &quot;团队如何巧妙统一 Node 版本？&quot;">​</a></h1><p>在现代前端开发中，Node.js 作为构建工具和服务端运行环境的基石，版本不一致可能导致各种问题，如依赖库兼容性问题、开发环境与生产环境不匹配等。</p><p>在不同项目中因为创建项目时期不同等原因，可能使用的 Node.js 版本不同，我们基本都会安装 nvm 等 Node.js 版本管理工具，方便在不同项目下切换不同的版本。但来回切换很容易导致混淆，因此引发的一些 bug 还难以排查。</p><p>为了确保团队协作项目的稳定性和一致性，我们需要采取一些措施来保证项目中的 Node 版本一致。</p><p>以下是一些常用的方法：</p><h2 id="_1-package-json-的-engines-字段" tabindex="-1">1. package.json 的 engines 字段 <a class="header-anchor" href="#_1-package-json-的-engines-字段" aria-label="Permalink to &quot;1. package.json 的 engines 字段&quot;">​</a></h2><p>在项目的 package.json 文件中，可以使用 engines 字段来指定所需的 Node 版本。在该字段中，我们可以定义一个范围或者具体的版本号来限制 Node 的版本。</p><p>具体 engines 配置说明如下：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 指定特定版本号</span></span>
<span class="line"><span style="color:#9ECBFF;">&quot;engines&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;node&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;14.17.0&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 范围符号：表示项目需要Node版本大于等于12.0.0且小于16.0.0。</span></span>
<span class="line"><span style="color:#9ECBFF;">&quot;engines&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;node&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;&gt;=12.0.0 &lt;16.0.0&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 波浪线符号：表示项目需要Node版本为14.17.x</span></span>
<span class="line"><span style="color:#9ECBFF;">&quot;engines&quot;</span><span style="color:#E1E4E8;">: { </span><span style="color:#79B8FF;">&quot;node&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;~14.17.0&quot;</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 插入符号：表示项目需要Node版本为14.x.x</span></span>
<span class="line"><span style="color:#9ECBFF;">&quot;engines&quot;</span><span style="color:#E1E4E8;">: { </span><span style="color:#79B8FF;">&quot;node&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;^14.17.0&quot;</span><span style="color:#E1E4E8;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 指定特定版本号</span></span>
<span class="line"><span style="color:#032F62;">&quot;engines&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;node&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;14.17.0&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 范围符号：表示项目需要Node版本大于等于12.0.0且小于16.0.0。</span></span>
<span class="line"><span style="color:#032F62;">&quot;engines&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;node&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;&gt;=12.0.0 &lt;16.0.0&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 波浪线符号：表示项目需要Node版本为14.17.x</span></span>
<span class="line"><span style="color:#032F62;">&quot;engines&quot;</span><span style="color:#24292E;">: { </span><span style="color:#005CC5;">&quot;node&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;~14.17.0&quot;</span><span style="color:#24292E;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 插入符号：表示项目需要Node版本为14.x.x</span></span>
<span class="line"><span style="color:#032F62;">&quot;engines&quot;</span><span style="color:#24292E;">: { </span><span style="color:#005CC5;">&quot;node&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;^14.17.0&quot;</span><span style="color:#24292E;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>这样做的好处是，当项目成员运行 npm install 时，npm 会自动检查 Node 版本是否满足要求，并给出警告或错误信息。</p><p><img src="https://pic.imgdb.cn/item/65e7c9da9f345e8d0327a6bf.jpg" alt="node"></p><p>但是，我们在使用npm install时，发现engines配置并没有起作用，然后换yarn安装，发现engines配置又起作用了。</p><p><img src="https://pic.imgdb.cn/item/65e7c9da9f345e8d0327a6f0.jpg" alt="node"></p><p>到底是什么原因导致的呢？</p><h2 id="_2-使用-npmrc-文件" tabindex="-1">2. 使用 .npmrc 文件 <a class="header-anchor" href="#_2-使用-npmrc-文件" aria-label="Permalink to &quot;2. 使用 .npmrc 文件&quot;">​</a></h2><p>原来 engines 只是建议，默认不开启严格版本校验，只会给出提示，需要手动开启严格模式。在根目录下 .npmrc 添加 engine-strict = true才会起作用。配置完成后再执行npm install:</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"># .npmrc</span></span>
<span class="line"><span style="color:#e1e4e8;">engine-strict = true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"># .npmrc</span></span>
<span class="line"><span style="color:#24292e;">engine-strict = true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">npm ERR! code ENOTSUP</span></span>
<span class="line"><span style="color:#e1e4e8;">npm ERR! notsup Unsupported engine for react_antd_admin_template@1.0.0: wanted: {&quot;node&quot;:&quot;14.17.5&quot;,&quot;npm&quot;:&quot;6.14.14&quot;} (current: {&quot;node&quot;:&quot;16.18.1&quot;,&quot;npm&quot;:&quot;8.19.2&quot;})</span></span>
<span class="line"><span style="color:#e1e4e8;">npm ERR! notsup Not compatible with your version of node/npm: react_antd_admin_template@1.0.0</span></span>
<span class="line"><span style="color:#e1e4e8;">npm ERR! notsup Not compatible with your version of node/npm: react_antd_admin_template@1.0.0</span></span>
<span class="line"><span style="color:#e1e4e8;">npm ERR! notsup Required: {&quot;node&quot;:&quot;14.17.5&quot;,&quot;npm&quot;:&quot;6.14.14&quot;}</span></span>
<span class="line"><span style="color:#e1e4e8;">npm ERR! notsup Actual:   {&quot;node&quot;:&quot;16.18.1&quot;,&quot;npm&quot;:&quot;8.19.2&quot;}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">npm ERR! code ENOTSUP</span></span>
<span class="line"><span style="color:#24292e;">npm ERR! notsup Unsupported engine for react_antd_admin_template@1.0.0: wanted: {&quot;node&quot;:&quot;14.17.5&quot;,&quot;npm&quot;:&quot;6.14.14&quot;} (current: {&quot;node&quot;:&quot;16.18.1&quot;,&quot;npm&quot;:&quot;8.19.2&quot;})</span></span>
<span class="line"><span style="color:#24292e;">npm ERR! notsup Not compatible with your version of node/npm: react_antd_admin_template@1.0.0</span></span>
<span class="line"><span style="color:#24292e;">npm ERR! notsup Not compatible with your version of node/npm: react_antd_admin_template@1.0.0</span></span>
<span class="line"><span style="color:#24292e;">npm ERR! notsup Required: {&quot;node&quot;:&quot;14.17.5&quot;,&quot;npm&quot;:&quot;6.14.14&quot;}</span></span>
<span class="line"><span style="color:#24292e;">npm ERR! notsup Actual:   {&quot;node&quot;:&quot;16.18.1&quot;,&quot;npm&quot;:&quot;8.19.2&quot;}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>此时通过 npm 安装，限制 Node 版本便起作用了。</p><h2 id="_3-使用-nvmrc-文件" tabindex="-1">3. 使用 .nvmrc 文件 <a class="header-anchor" href="#_3-使用-nvmrc-文件" aria-label="Permalink to &quot;3. 使用 .nvmrc 文件&quot;">​</a></h2><p>通过上面的方式，可以做到让大家使用相同的 Node 版本，但每次提示版本不符合，需要开发人员到package.json中查看版本号，然后再使用nvm切换指定版本，太麻烦了，高效开发不是这么干的。</p><p>我们可以创建一个.nvmrc文件， 指定项目 Node 版本：</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"># .nvmrc</span></span>
<span class="line"><span style="color:#e1e4e8;">v14.17.5</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"># .nvmrc</span></span>
<span class="line"><span style="color:#24292e;">v14.17.5</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>此时，执行nvm use 自动就切换到项目执行的 Node 版本。</p><p><img src="https://pic.imgdb.cn/item/65e7ca999f345e8d032955f9.jpg" alt="text"></p><p>.nvmrc文件是一个存放指定 Node 版本的配置文件，可以告诉项目的成员应该使用哪个Node 版本来运行项目。</p><p>如果我们没有安装对应版本的 Node ，执行时也会提示没有安装</p><p><img src="https://pic.imgdb.cn/item/65e7ca999f345e8d03295635.jpg" alt="text"></p><p>非常简单的配置， 就能解决团队协作项目中的 Node 版本不一致这个大麻烦。</p><hr><p><a href="https://mp.weixin.qq.com/s/xONRmYwfWJCrGz35z91h5w" target="_blank" rel="noreferrer">原文</a></p>`,31),l=[o];function t(c,r,i,u,d,m){return n(),a("div",null,l)}const y=s(p,[["render",t]]);export{b as __pageData,y as default};
