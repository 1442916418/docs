import{_ as s,o as n,c as l,Q as a}from"./chunks/framework.aea2adc8.js";const u=JSON.parse('{"title":"Blender","description":"","frontmatter":{},"headers":[],"relativePath":"guide/base/blender/questions.md","filePath":"guide/base/blender/questions.md","lastUpdated":1709703458000}'),o={name:"guide/base/blender/questions.md"},e=a(`<h1 id="blender" tabindex="-1">Blender <a class="header-anchor" href="#blender" aria-label="Permalink to &quot;Blender&quot;">​</a></h1><h2 id="_1-blender-基础知识" tabindex="-1">1. Blender 基础知识 <a class="header-anchor" href="#_1-blender-基础知识" aria-label="Permalink to &quot;1. Blender 基础知识&quot;">​</a></h2><p><code>Blender</code> 是一款免费且开源的 <strong>3D</strong> 创建套件，广泛用于 <strong>3D</strong> 模型制作、动画、渲染、以及视频编辑等。它支持整个 <strong>3D</strong> 制作流程的多种功能，包括建模、雕刻、纹理、着色、动画、粒子和其他模拟、脚本、渲染、合成、跟踪、以及视频编辑等。在 <code>Web</code> 前端开发中，<code>Blender</code> 可以用于创建3D模型和动画，这些模型和动画可以通过 <code>WebGL</code> 技术在网页上展示，为用户提供交互式的 <strong>3D</strong> 体验。</p><h2 id="_2-3d-模型与-webgl" tabindex="-1">2. 3D 模型与 WebGL <a class="header-anchor" href="#_2-3d-模型与-webgl" aria-label="Permalink to &quot;2. 3D 模型与 WebGL&quot;">​</a></h2><p>将 <code>Blender</code> 中创建的 <strong>3D</strong> 模型导入 <code>Web</code> 页面通常需要以下步骤：</p><ul><li><p><strong>模型导出</strong>：首先，在 <code>Blender</code> 中将模型导出为 <code>WebGL</code> 支持的格式，如 <code>.glTF</code> 或 <code>.glb</code> 格式，这些格式旨在通过网页高效地传输和加载 <strong>3D</strong> 内容。</p></li><li><p><strong>WebGL集成</strong>：使用 <code>Three.js</code> 这样的 <code>WebGL</code> 库来加载和显示模型。<code>Three.js</code> 提供了一个易于使用的 <strong>API</strong> 来处理 <strong>3D</strong> 图形，使得将 <strong>3D</strong> 模型集成到 <code>Web</code> 页面变得更加简单。</p></li><li><p><strong>示例代码</strong>：</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">src</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;https://threejs.org/build/three.js&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">scene</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">THREE</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Scene</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">camera</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">THREE</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">PerspectiveCamera</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">75</span><span style="color:#E1E4E8;">, window.innerWidth</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">window.innerHeight, </span><span style="color:#79B8FF;">0.1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">renderer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">THREE</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">WebGLRenderer</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  renderer.</span><span style="color:#B392F0;">setSize</span><span style="color:#E1E4E8;">(window.innerWidth, window.innerHeight);</span></span>
<span class="line"><span style="color:#E1E4E8;">  document.body.</span><span style="color:#B392F0;">appendChild</span><span style="color:#E1E4E8;">(renderer.domElement);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 加载模型</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">loader</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">THREE</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">GLTFLoader</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  loader.</span><span style="color:#B392F0;">load</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path/to/your/model.gltf&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">gltf</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    scene.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(gltf.scene);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }, </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">error</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(error);</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  camera.position.z </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">animate</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">requestAnimationFrame</span><span style="color:#E1E4E8;">(animate);</span></span>
<span class="line"><span style="color:#E1E4E8;">    renderer.</span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(scene, camera);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">animate</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;https://threejs.org/build/three.js&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">scene</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">THREE</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Scene</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">camera</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">THREE</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">PerspectiveCamera</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">75</span><span style="color:#24292E;">, window.innerWidth</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">window.innerHeight, </span><span style="color:#005CC5;">0.1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">renderer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">THREE</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">WebGLRenderer</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  renderer.</span><span style="color:#6F42C1;">setSize</span><span style="color:#24292E;">(window.innerWidth, window.innerHeight);</span></span>
<span class="line"><span style="color:#24292E;">  document.body.</span><span style="color:#6F42C1;">appendChild</span><span style="color:#24292E;">(renderer.domElement);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 加载模型</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">loader</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">THREE</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">GLTFLoader</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  loader.</span><span style="color:#6F42C1;">load</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;path/to/your/model.gltf&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">gltf</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    scene.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(gltf.scene);</span></span>
<span class="line"><span style="color:#24292E;">  }, </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">error</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(error);</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  camera.position.z </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">animate</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">requestAnimationFrame</span><span style="color:#24292E;">(animate);</span></span>
<span class="line"><span style="color:#24292E;">    renderer.</span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(scene, camera);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">animate</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div></li></ul><h2 id="_3-性能优化" tabindex="-1">3. 性能优化 <a class="header-anchor" href="#_3-性能优化" aria-label="Permalink to &quot;3. 性能优化&quot;">​</a></h2><p>优化 <code>Web</code> 页面中的 <code>Blender</code> 模型和动画主要包括：</p><ul><li><strong>减少多边形数量</strong>：在 <code>Blender</code> 中优化模型，减少多边形数量，以降低浏览器渲染的负担。</li><li><strong>纹理压缩</strong>：使用更小的纹理文件，或者对纹理进行压缩，以减少加载时间和内存使用。</li><li><strong>使用LOD（Level of Detail）技术</strong>：为同一模型提供不同详细级别的版本，根据相机距离切换，以提高渲染效率。</li><li><strong>分割和延迟加载</strong>：对大型场景进行分割，只在需要时加载模型或场景部分，以减少初始加载时间。</li><li><strong>异步加载</strong>：通过将 <strong>3D</strong> 模型、纹理和其他资源分批次异步加载到场景中，可以减少用户等待时间，提高用户体验。</li><li><strong>渐进式渲染</strong>：先加载模型的低精度版本，然后逐步替换为高精度版本。这种方法可以快速向用户展示内容，同时在后台加载更详细的数据。</li><li><strong>利用浏览器缓存</strong>：确保 <strong>3D</strong> 资源（如模型和纹理文件）被正确缓存，以避免重复下载。</li><li><strong>服务端缓存</strong>：对于动态生成或频繁请求的资源，使用服务端缓存来减少处理时间和响应速度。</li><li><strong>后台处理</strong>：将计算密集型任务（如模型的解析或物理仿真）移至 <code>Web Workers</code> 中执行，可以避免阻塞主线程，确保界面的流畅响应。</li><li><strong>合并文件</strong>：将多个小的资源文件（如纹理、模型片段）合并成较大的文件，减少 <code>HTTP</code> 请求的数量。</li><li><strong>精简库和框架</strong>：仅包含必要的库和框架代码，移除未使用的模块或功能，减小总体文件大小。</li><li><strong>烘焙光照</strong>：在 <strong>3D</strong> 模型中使用预计算和烘焙的光照贴图，而不是实时计算光照效果，可以显著减少渲染负担。</li><li><strong>硬件加速</strong>：充分利用浏览器的GPU硬件加速功能，优化渲染路径和着色器代码，提高渲染效率。</li><li><strong>减少场景中的对象数量</strong>：通过合并静态对象或使用实例化渲染，减少场景中渲染对象的总数。</li><li><strong>剔除和裁剪</strong>：实现视锥体剔除和遮挡剔除，避免渲染视线外或被其他对象遮挡的模型。</li></ul><h2 id="_4-交互式3d元素" tabindex="-1">4. 交互式3D元素 <a class="header-anchor" href="#_4-交互式3d元素" aria-label="Permalink to &quot;4. 交互式3D元素&quot;">​</a></h2><p>为网页中的 <code>Blender</code> 模型添加交互性，可以通过以下方法实现：</p><ul><li><strong>使用Three.js事件监听器</strong>：监听鼠标或触摸事件，如点击或悬停，以触发模型的动作或动画。</li><li><strong>控制器和GUI工具</strong>：使用 <code>dat.GUI</code> 或其他 <code>Web</code> 控制库提供用户界面，允许用户调整模型参数或控制动画。</li><li><strong>集成物理引擎</strong>：如使用 <code>cannon.js</code> 或 <code>ammo.js</code>，为 <strong>3D</strong> 对象添加物理行为（如碰撞检测、重力）增强交互性。</li></ul><h2 id="_5-工具链集成" tabindex="-1">5. 工具链集成 <a class="header-anchor" href="#_5-工具链集成" aria-label="Permalink to &quot;5. 工具链集成&quot;">​</a></h2><p>一个高效的工作流程包括：</p><ul><li><strong>模型制作</strong>：在 <code>Blender</code> 中创建或优化 <strong>3D</strong> 模型。</li><li><strong>导出</strong>：将模型导出为<code>.glTF</code>或<code>.glb</code>格式。</li><li><strong>优化</strong>：使用 <code>glTF-Pipeline</code> 等工具进一步优化模型文件，如压缩纹理和减少文件大小。</li><li><strong>开发与测试</strong>：在 <code>Web</code> 项目中使用 <code>Three.js</code> 等库加载和展示模型，同时进行性能优化和交云测试。</li><li><strong>部署</strong>：将最终 <code>Web</code> 项目部署到服务器，确保模型可以快速且正确地加载和显示。</li></ul><h2 id="_6-跨平台兼容性" tabindex="-1">6. 跨平台兼容性 <a class="header-anchor" href="#_6-跨平台兼容性" aria-label="Permalink to &quot;6. 跨平台兼容性&quot;">​</a></h2><p>确保兼容性的策略包括：</p><ul><li><strong>使用广泛支持的格式</strong>：选择如 <code>.glTF</code> 这样广泛支持的3D模型格式。</li><li><strong>响应式设计</strong>：确保 <strong>3D</strong> 内容在不同设备和屏幕尺寸上正确显示，可能需要调整相机参数和渲染设置。</li><li><strong>性能测试</strong>：在不同的设备和浏览器上测试，调整模型和代码以优化性能和加载时间。</li></ul><h2 id="_7-最新趋势和技术" tabindex="-1">7. 最新趋势和技术 <a class="header-anchor" href="#_7-最新趋势和技术" aria-label="Permalink to &quot;7. 最新趋势和技术&quot;">​</a></h2><p>前端开发中使用 <code>Blender</code> 的新趋势和技术包括：</p><ul><li><strong>WebXR</strong>：为虚拟现实（<strong>VR</strong>）和增强现实（<strong>AR</strong>）提供Web支持，创建更加沉浸式的用户体验。</li><li><strong>实时渲染技术</strong>：使用 <code>WebGPU</code> 等新技术提高渲染性能，实现更加复杂和逼真的 <strong>3D</strong> 场景。</li><li><strong>AI驱动的3D内容创建</strong>：利用 <code>AI</code>技术自动生成或优化 <strong>3D</strong> 模型和纹理，提高开发效率和创造力。</li></ul><h2 id="插件" tabindex="-1">插件 <a class="header-anchor" href="#插件" aria-label="Permalink to &quot;插件&quot;">​</a></h2><ul><li><p><strong>BlenderGIS</strong></p><ul><li>用于导入和导出 <code>GIS</code> 数据的插件，允许用户在 <code>Blender</code> 中处理地理信息，创建真实世界的 <strong>3D</strong> 地图和景观。</li></ul></li><li><p><strong>PowerProps</strong></p><ul><li>提供高级建模工具和功能，如快速布尔运算、物体对齐以及其他多种增强建模操作，旨在提升建模效率。</li></ul></li><li><p><strong>Building Tools</strong></p><ul><li>专注于建筑可视化的插件，提供了创建建筑元素（如墙壁、窗户、楼梯等）的工具，简化建筑建模过程。</li></ul></li><li><p><strong>Quad Remesher Bridge</strong></p><ul><li>为 <code>Blender</code> 提供自动重拓扑功能的桥接插件，能够将模型转换成具有四边形网格的高质量版本，适用于进一步的细节雕刻或动画制作。</li></ul></li><li><p><strong>Round Inset</strong></p><ul><li>提供圆形插入和其他高级插入建模功能的插件，使创建复杂的圆形细节和装饰变得更加简单。</li></ul></li><li><p><strong>Node Preview</strong></p><ul><li>为材质节点编辑器增加预览功能的插件，允许用户更直观地看到每个节点更改对材质最终效果的影响。</li></ul></li><li><p><strong>Extra Objects</strong></p><ul><li>扩展 <code>Blender</code> 默认添加物体的功能，包含大量额外的几何体、曲线和其他类型的对象，为创造性建模提供更多选择。</li></ul></li><li><p><strong>Archimesh</strong></p><ul><li>针对建筑设计的插件，提供了创建房间、家具、装饰等建筑元素的工具，适合快速建立室内和建筑场景。</li></ul></li><li><p><strong>glTF 2.0 格式</strong></p><ul><li>支持导入和导出 <code>glTF 2.0</code> 格式文件的插件，<code>glTF</code> 是一种开放标准的 <strong>3D</strong> 内容交付格式，优化了 <code>Web</code> 和移动应用的模型加载速度。</li></ul></li><li><p><strong>Copy Attributes Menu</strong></p><ul><li>允许用户快速复制一个对象属性到另一个对象的插件，例如位置、旋转、缩放、约束等。</li></ul></li><li><p><strong>Modifier Tools</strong></p><ul><li>提供了快速操作和管理修饰器的工具集，如一键应用所有修饰器、快速切换修饰器可见性等。</li></ul></li><li><p><strong>Material Library</strong></p><ul><li>允许用户创建、保存和重新使用材质的库插件，便于管理和共享材质。</li></ul></li><li><p><strong>Material Utilities</strong></p><ul><li>提供一系列材质管理和操作工具，如快速分配、替换材质，以及检查未使用的材质等。</li></ul></li><li><p><strong>Bool Tool</strong></p><ul><li>强化布尔运算的插件，通过提供直观的界面和工具，简化复杂布尔运算的操作流程。</li></ul></li></ul>`,23),p=[e];function r(t,c,i,E,y,d){return n(),l("div",null,p)}const b=s(o,[["render",r]]);export{u as __pageData,b as default};
