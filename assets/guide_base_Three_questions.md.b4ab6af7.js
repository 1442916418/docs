import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.aea2adc8.js";const F=JSON.parse('{"title":"Three.js","description":"","frontmatter":{},"headers":[],"relativePath":"guide/base/Three/questions.md","filePath":"guide/base/Three/questions.md","lastUpdated":1710295201000}'),p={name:"guide/base/Three/questions.md"},e=l(`<h1 id="three-js" tabindex="-1">Three.js <a class="header-anchor" href="#three-js" aria-label="Permalink to &quot;Three.js&quot;">​</a></h1><h2 id="什么是-three-js" tabindex="-1">什么是 Three.js？ <a class="header-anchor" href="#什么是-three-js" aria-label="Permalink to &quot;什么是 Three.js？&quot;">​</a></h2><p><code>Three.js</code> 是一个基于 <code>WebGL</code> 的 JavaScript 库，它提供了一套易于使用的 API 来在网页上创建和显示 3D 图形。通过抽象 <code>WebGL</code> 的复杂性，<code>Three.js</code> 使得开发者能够快速开发3D应用，而无需深入了解 <code>WebGL</code> 的底层细节。</p><h2 id="如何在-three-js-中创建一个基本的场景" tabindex="-1">如何在 Three.js 中创建一个基本的场景？ <a class="header-anchor" href="#如何在-three-js-中创建一个基本的场景" aria-label="Permalink to &quot;如何在 Three.js 中创建一个基本的场景？&quot;">​</a></h2><p>这段代码创建了一个包含绿色立方体的基本场景，并将摄像机后退以便于观察立方体。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 创建一个场景</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">scene</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">THREE</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Scene</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 创建一个带有透视摄像机</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">camera</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">THREE</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">PerspectiveCamera</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">75</span><span style="color:#E1E4E8;">, window.innerWidth </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> window.innerHeight, </span><span style="color:#79B8FF;">0.1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 创建一个 WebGL 渲染器</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">renderer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">THREE</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">WebGLRenderer</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">renderer.</span><span style="color:#B392F0;">setSize</span><span style="color:#E1E4E8;">(window.innerWidth, window.innerHeight)</span></span>
<span class="line"><span style="color:#E1E4E8;">document.body.</span><span style="color:#B392F0;">appendChild</span><span style="color:#E1E4E8;">(renderer.domElement)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 添加一个立方体</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">geometry</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">THREE</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">BoxGeometry</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">material</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">THREE</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">MeshBasicMaterial</span><span style="color:#E1E4E8;">({ color: </span><span style="color:#79B8FF;">0x00ff00</span><span style="color:#E1E4E8;"> })</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">cube</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">THREE</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Mesh</span><span style="color:#E1E4E8;">(geometry, material)</span></span>
<span class="line"><span style="color:#E1E4E8;">scene.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(cube)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">camera.position.z </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 渲染循环</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">animate</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">requestAnimationFrame</span><span style="color:#E1E4E8;">(animate)</span></span>
<span class="line"><span style="color:#E1E4E8;">  renderer.</span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(scene, camera)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">animate</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 创建一个场景</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">scene</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">THREE</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Scene</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 创建一个带有透视摄像机</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">camera</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">THREE</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">PerspectiveCamera</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">75</span><span style="color:#24292E;">, window.innerWidth </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> window.innerHeight, </span><span style="color:#005CC5;">0.1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 创建一个 WebGL 渲染器</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">renderer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">THREE</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">WebGLRenderer</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">renderer.</span><span style="color:#6F42C1;">setSize</span><span style="color:#24292E;">(window.innerWidth, window.innerHeight)</span></span>
<span class="line"><span style="color:#24292E;">document.body.</span><span style="color:#6F42C1;">appendChild</span><span style="color:#24292E;">(renderer.domElement)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 添加一个立方体</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">geometry</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">THREE</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">BoxGeometry</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">material</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">THREE</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">MeshBasicMaterial</span><span style="color:#24292E;">({ color: </span><span style="color:#005CC5;">0x00ff00</span><span style="color:#24292E;"> })</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">cube</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">THREE</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Mesh</span><span style="color:#24292E;">(geometry, material)</span></span>
<span class="line"><span style="color:#24292E;">scene.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(cube)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">camera.position.z </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 渲染循环</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">animate</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">requestAnimationFrame</span><span style="color:#24292E;">(animate)</span></span>
<span class="line"><span style="color:#24292E;">  renderer.</span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(scene, camera)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">animate</span><span style="color:#24292E;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h2 id="three-js-中的-mesh-是什么" tabindex="-1"><code>Three.js</code> 中的 <code>Mesh</code> 是什么？ <a class="header-anchor" href="#three-js-中的-mesh-是什么" aria-label="Permalink to &quot;\`Three.js\` 中的 \`Mesh\` 是什么？&quot;">​</a></h2><p><code>Mesh</code> 是 <code>Three.js</code> 中的一个基本概念，表示一个由几何体（Geometry）和材质（Material）组合而成的3D物体。几何体定义了物体的形状，而材质定义了表面的外观（如颜色、纹理）。</p><h2 id="解释-three-js-中的光源类型" tabindex="-1">解释 Three.js 中的光源类型 <a class="header-anchor" href="#解释-three-js-中的光源类型" aria-label="Permalink to &quot;解释 Three.js 中的光源类型&quot;">​</a></h2><p><code>Three.js</code> 提供了多种光源，以支持不同的照明需求，包括：</p><ul><li><code>AmbientLight</code> 环境光：提供无方向的光源，影响场景中所有物体的颜色。</li><li><code>PointLight</code> 点光源：从一个点向所有方向发散光线，类似于灯泡。</li><li><code>DirectionalLight</code> 平行光：模拟远处的光源（如太阳），发出平行光线。</li><li><code>SpotLight</code> 聚光灯：从一个点向特定方向发射光线，形成一个锥形照明区域。</li><li><code>HemisphereLight</code> 半球光：模拟天空和地面之间的光照渐变。</li></ul><h2 id="如何在-three-js-中添加纹理" tabindex="-1">如何在 Three.js 中添加纹理？ <a class="header-anchor" href="#如何在-three-js-中添加纹理" aria-label="Permalink to &quot;如何在 Three.js 中添加纹理？&quot;">​</a></h2><p>这段代码使用 <code>TextureLoader</code> 加载一个纹理，并将其应用于一个材质，最后将材质应用于一个几何体来创建带有纹理的 <code>Mesh</code></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">textureLoader</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">THREE</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">TextureLoader</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">textureLoader.</span><span style="color:#B392F0;">load</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;textures/texture.jpg&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">texture</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">geometry</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">THREE</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">BoxGeometry</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">material</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">THREE</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">MeshBasicMaterial</span><span style="color:#E1E4E8;">({ map: texture })</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">mesh</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">THREE</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Mesh</span><span style="color:#E1E4E8;">(geometry, material)</span></span>
<span class="line"><span style="color:#E1E4E8;">  scene.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(mesh)</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">textureLoader</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">THREE</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">TextureLoader</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">textureLoader.</span><span style="color:#6F42C1;">load</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;textures/texture.jpg&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">texture</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">geometry</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">THREE</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">BoxGeometry</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">material</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">THREE</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">MeshBasicMaterial</span><span style="color:#24292E;">({ map: texture })</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">mesh</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">THREE</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Mesh</span><span style="color:#24292E;">(geometry, material)</span></span>
<span class="line"><span style="color:#24292E;">  scene.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(mesh)</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="什么是-meshbasicmaterial" tabindex="-1">什么是 MeshBasicMaterial？ <a class="header-anchor" href="#什么是-meshbasicmaterial" aria-label="Permalink to &quot;什么是 MeshBasicMaterial？&quot;">​</a></h2><p><code>MeshBasicMaterial</code> 是 <code>Three.js</code> 中最简单的材质之一，它不考虑场景中的光照，因此不会产生阴影。这种材质常用于创建不需要反应光照效果的物体，例如，用于测试、调试或那些不需要复杂光照的场景。</p><h2 id="如何给材质添加颜色" tabindex="-1">如何给材质添加颜色？ <a class="header-anchor" href="#如何给材质添加颜色" aria-label="Permalink to &quot;如何给材质添加颜色？&quot;">​</a></h2><p>给材质添加颜色可以通过设置材质的 <code>color</code> 属性。例如，使用 <code>MeshLambertMaterial</code> 并设置其颜色为红色：</p><p>这将创建一个红色的MeshLambertMaterial材质，它会与场景中的光源交互产生光照效果。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">material</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">THREE</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">MeshLambertMaterial</span><span style="color:#E1E4E8;">({ color: </span><span style="color:#79B8FF;">0xff0000</span><span style="color:#E1E4E8;"> })</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">material</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">THREE</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">MeshLambertMaterial</span><span style="color:#24292E;">({ color: </span><span style="color:#005CC5;">0xff0000</span><span style="color:#24292E;"> })</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="如何让材质看起来是透明的" tabindex="-1">如何让材质看起来是透明的？ <a class="header-anchor" href="#如何让材质看起来是透明的" aria-label="Permalink to &quot;如何让材质看起来是透明的？&quot;">​</a></h2><p>要创建透明材质，需要将材质的 <code>transparent</code> 属性设置为 <code>true</code>，并设置 <code>opacity</code> 属性来控制透明度（0.0 完全透明，1.0 完全不透明）。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">material</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">THREE</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">MeshBasicMaterial</span><span style="color:#E1E4E8;">({ color: </span><span style="color:#79B8FF;">0x00ff00</span><span style="color:#E1E4E8;">, transparent: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, opacity: </span><span style="color:#79B8FF;">0.5</span><span style="color:#E1E4E8;"> })</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">material</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">THREE</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">MeshBasicMaterial</span><span style="color:#24292E;">({ color: </span><span style="color:#005CC5;">0x00ff00</span><span style="color:#24292E;">, transparent: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, opacity: </span><span style="color:#005CC5;">0.5</span><span style="color:#24292E;"> })</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="meshlambertmaterial-与-meshphongmaterial-有什么区别" tabindex="-1">MeshLambertMaterial 与 MeshPhongMaterial 有什么区别？ <a class="header-anchor" href="#meshlambertmaterial-与-meshphongmaterial-有什么区别" aria-label="Permalink to &quot;MeshLambertMaterial 与 MeshPhongMaterial 有什么区别？&quot;">​</a></h2><p><code>MeshLambertMaterial</code> 是一种考虑光照的材质，适用于大多数非发光物体，它进行的是简化的、非真实的光照计算，主要反映漫反射光。</p><p><code>MeshPhongMaterial</code> 提供了更复杂的光照模型，包括镜面高光，适用于需要表现光滑、反光表面的物体。</p><h2 id="如何给材质添加纹理" tabindex="-1">如何给材质添加纹理？ <a class="header-anchor" href="#如何给材质添加纹理" aria-label="Permalink to &quot;如何给材质添加纹理？&quot;">​</a></h2><p>给材质添加纹理需要使用 <code>TextureLoader</code> 加载纹理图片，然后将加载的纹理设置给材质的 <code>map</code> 属性。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">texture</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">THREE</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">TextureLoader</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">load</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path/to/texture.jpg&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">material</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">THREE</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">MeshBasicMaterial</span><span style="color:#E1E4E8;">({ map: texture })</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">texture</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">THREE</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">TextureLoader</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">load</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;path/to/texture.jpg&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">material</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">THREE</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">MeshBasicMaterial</span><span style="color:#24292E;">({ map: texture })</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="什么是-shadermaterial-和-rawshadermaterial" tabindex="-1">什么是 ShaderMaterial 和 RawShaderMaterial？ <a class="header-anchor" href="#什么是-shadermaterial-和-rawshadermaterial" aria-label="Permalink to &quot;什么是 ShaderMaterial 和 RawShaderMaterial？&quot;">​</a></h2><p><code>ShaderMaterial</code> 和 <code>RawShaderMaterial</code> 都允许开发者自定义材质的着色器程序。<code>ShaderMaterial</code> 使用 <code>Three.js</code> 的着色器语言模板，自动包含了 <code>Three.js</code> 环境中的一些默认 <code>uniforms</code> 和 <code>attributes</code>。<code>RawShaderMaterial</code> 则不包括这些默认值，给予开发者更高级的控制，适用于需要完全自定义着色器代码的场景。</p><h2 id="如何实现材质的环境贴图效果" tabindex="-1">如何实现材质的环境贴图效果？ <a class="header-anchor" href="#如何实现材质的环境贴图效果" aria-label="Permalink to &quot;如何实现材质的环境贴图效果？&quot;">​</a></h2><p>环境贴图(Reflection or Refraction)可以通过设置材质的 <code>envMap</code> 属性实现，通常与 <code>CubeTextureLoader</code> 一起使用，加载六个方向的纹理图像作为环境贴图。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">cubeTextureLoader</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">THREE</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">CubeTextureLoader</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">textureCube</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cubeTextureLoader.</span><span style="color:#B392F0;">load</span><span style="color:#E1E4E8;">([</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;px.jpg&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;nx.jpg&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;py.jpg&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;ny.jpg&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;pz.jpg&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;nz.jpg&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">material</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">THREE</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">MeshBasicMaterial</span><span style="color:#E1E4E8;">({ color: </span><span style="color:#79B8FF;">0xffffff</span><span style="color:#E1E4E8;">, envMap: textureCube })</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">cubeTextureLoader</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">THREE</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">CubeTextureLoader</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">textureCube</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cubeTextureLoader.</span><span style="color:#6F42C1;">load</span><span style="color:#24292E;">([</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;px.jpg&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;nx.jpg&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;py.jpg&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;ny.jpg&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;pz.jpg&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;nz.jpg&#39;</span></span>
<span class="line"><span style="color:#24292E;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">material</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">THREE</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">MeshBasicMaterial</span><span style="color:#24292E;">({ color: </span><span style="color:#005CC5;">0xffffff</span><span style="color:#24292E;">, envMap: textureCube })</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="如何使用-pbr-基于物理的渲染-材质" tabindex="-1">如何使用 PBR（基于物理的渲染）材质？ <a class="header-anchor" href="#如何使用-pbr-基于物理的渲染-材质" aria-label="Permalink to &quot;如何使用 PBR（基于物理的渲染）材质？&quot;">​</a></h2><p><code>Three.js</code> 提供了 <code>MeshStandardMaterial</code> 和 <code>MeshPhysicalMaterial</code> 两种基于物理的渲染(PBR)材质，它们提供了更真实的材质外观，通过模拟真实世界的光照和反射。</p><p>这些材质的参数，如 <code>metalness</code> 金属度和 <code>roughness</code> 粗糙度，可以调整材质的光照和反射特性，以适应不同的物理特性。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">material</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">THREE</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">MeshStandardMaterial</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  color: </span><span style="color:#79B8FF;">0x0055ff</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  metalness: </span><span style="color:#79B8FF;">0.5</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  roughness: </span><span style="color:#79B8FF;">0.5</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">material</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">THREE</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">MeshStandardMaterial</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  color: </span><span style="color:#005CC5;">0x0055ff</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  metalness: </span><span style="color:#005CC5;">0.5</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  roughness: </span><span style="color:#005CC5;">0.5</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="解释-three-js-中的相机类型及其用途" tabindex="-1">解释 Three.js 中的相机类型及其用途 <a class="header-anchor" href="#解释-three-js-中的相机类型及其用途" aria-label="Permalink to &quot;解释 Three.js 中的相机类型及其用途&quot;">​</a></h2><p><code>Three.js</code> 提供了两种主要的相机类型：</p><ul><li><code>PerspectiveCamera</code> 透视相机：模拟人眼所见的透视效果，远处的物体看起来比近处的小。适用于大多数 3D 场景。</li><li><code>OrthographicCamera</code> 正交相机：所有的物体无论远近都以相同的尺寸渲染，没有透视效果。适合用于 2D 游戏或 UI 元素。</li></ul><h2 id="如何在-three-js-中实现阴影效果" tabindex="-1">如何在 Three.js 中实现阴影效果？ <a class="header-anchor" href="#如何在-three-js-中实现阴影效果" aria-label="Permalink to &quot;如何在 Three.js 中实现阴影效果？&quot;">​</a></h2><p>要实现阴影效果，需要设置光源支持阴影，设置物体接收或产生阴影，并在渲染器上启用阴影映射。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 光源支持阴影</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">light</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">THREE</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">DirectionalLight</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0xffffff</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">light.castShadow </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">scene.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(light)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 设置物体产生阴影</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">mesh</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">THREE</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Mesh</span><span style="color:#E1E4E8;">(geometry, material)</span></span>
<span class="line"><span style="color:#E1E4E8;">mesh.castShadow </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 设置物体接收阴影</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">floor</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">THREE</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Mesh</span><span style="color:#E1E4E8;">(floorGeometry, floorMaterial)</span></span>
<span class="line"><span style="color:#E1E4E8;">floor.receiveShadow </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 在渲染器上启用阴影映射</span></span>
<span class="line"><span style="color:#E1E4E8;">renderer.shadowMap.enabled </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 光源支持阴影</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">light</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">THREE</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">DirectionalLight</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0xffffff</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">light.castShadow </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">scene.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(light)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 设置物体产生阴影</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">mesh</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">THREE</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Mesh</span><span style="color:#24292E;">(geometry, material)</span></span>
<span class="line"><span style="color:#24292E;">mesh.castShadow </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 设置物体接收阴影</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">floor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">THREE</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Mesh</span><span style="color:#24292E;">(floorGeometry, floorMaterial)</span></span>
<span class="line"><span style="color:#24292E;">floor.receiveShadow </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 在渲染器上启用阴影映射</span></span>
<span class="line"><span style="color:#24292E;">renderer.shadowMap.enabled </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="three-js中的几何体-geometry-和缓冲几何体-buffergeometry-有什么区别" tabindex="-1">Three.js中的几何体（Geometry）和缓冲几何体（BufferGeometry）有什么区别？ <a class="header-anchor" href="#three-js中的几何体-geometry-和缓冲几何体-buffergeometry-有什么区别" aria-label="Permalink to &quot;Three.js中的几何体（Geometry）和缓冲几何体（BufferGeometry）有什么区别？&quot;">​</a></h2><p><code>Geometry</code> 是 <code>Three.js</code> 中较早的几何体表示形式，易于使用和修改，但在性能上不如 <code>BufferGeometry</code>。 <code>BufferGeometry</code> 是一种更高效的几何体表示形式，直接在 <strong>GPU</strong> 上操作，适合处理大量的顶点数据和复杂的模型。虽然使用起来比 <code>Geometry</code> 复杂，但提供了更好的性能。</p><h2 id="如何在three-js场景中实现雾效果-fog" tabindex="-1">如何在Three.js场景中实现雾效果（Fog）？ <a class="header-anchor" href="#如何在three-js场景中实现雾效果-fog" aria-label="Permalink to &quot;如何在Three.js场景中实现雾效果（Fog）？&quot;">​</a></h2><p>通过设置 <code>scene.fog</code> 属性，可以向场景添加雾效果，<code>Fog</code> 用于创建线性雾效，而 <code>FogExp2</code> 创建指数雾效，提高远处物体的模糊度。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 添加线性雾效果</span></span>
<span class="line"><span style="color:#E1E4E8;">scene.fog </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">THREE</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Fog</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0xffffff</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 或添加指数雾效果</span></span>
<span class="line"><span style="color:#E1E4E8;">scene.fog </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">THREE</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">FogExp2</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0xffffff</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.01</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 添加线性雾效果</span></span>
<span class="line"><span style="color:#24292E;">scene.fog </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">THREE</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Fog</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0xffffff</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 或添加指数雾效果</span></span>
<span class="line"><span style="color:#24292E;">scene.fog </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">THREE</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">FogExp2</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0xffffff</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.01</span><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="如何使用-three-js-加载外部模型" tabindex="-1">如何使用 Three.js 加载外部模型？ <a class="header-anchor" href="#如何使用-three-js-加载外部模型" aria-label="Permalink to &quot;如何使用 Three.js 加载外部模型？&quot;">​</a></h2><p><code>Three.js</code> 提供了多种加载器来支持不同格式的模型导入，如 <code>GLTFLoader</code> 用于加载 <code>.glb</code> 或 <code>.gltf</code> 格式的模型。</p><p>这段代码使用 <code>GLTFLoader</code> 加载 <code>GLTF</code> 模型，并将其添加到场景中。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">loader</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">THREE</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">GLTFLoader</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">loader.</span><span style="color:#B392F0;">load</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;model.gltf&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">gltf</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  scene.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(gltf.scene)</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">loader</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">THREE</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">GLTFLoader</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">loader.</span><span style="color:#6F42C1;">load</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;model.gltf&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">gltf</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  scene.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(gltf.scene)</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="解释-three-js-中的渲染循环及其重要性" tabindex="-1">解释 Three.js 中的渲染循环及其重要性 <a class="header-anchor" href="#解释-three-js-中的渲染循环及其重要性" aria-label="Permalink to &quot;解释 Three.js 中的渲染循环及其重要性&quot;">​</a></h2><p>渲染循环是 <code>Three.js</code>应用中不断执行的循环，负责更新场景和相机状态，然后渲染更新后的场景到屏幕上。这对于创建动画和响应用户输入至关重要，确保场景能够流畅地更新和渲染。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">animate</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">requestAnimationFrame</span><span style="color:#E1E4E8;">(animate)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 更新物体状态</span></span>
<span class="line"><span style="color:#E1E4E8;">  renderer.</span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(scene, camera)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">animate</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">animate</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">requestAnimationFrame</span><span style="color:#24292E;">(animate)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 更新物体状态</span></span>
<span class="line"><span style="color:#24292E;">  renderer.</span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(scene, camera)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">animate</span><span style="color:#24292E;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>使用 <code>requestAnimationFrame</code> 方法来实现高效的渲染循环，它会在浏览器准备好新的帧时调用。</p><h2 id="在-three-js-中如何创建和使用后处理效果" tabindex="-1">在 Three.js 中如何创建和使用后处理效果？ <a class="header-anchor" href="#在-three-js-中如何创建和使用后处理效果" aria-label="Permalink to &quot;在 Three.js 中如何创建和使用后处理效果？&quot;">​</a></h2><p>后处理效果需要使用 <code>EffectComposer</code> 及一系列的 <code>Pass</code> 对象。首先创建一个 <code>EffectComposer</code>，然后向其添加不同的 <code>Pass</code> 来实现各种视觉效果。</p><p>这允许开发者在渲染过程中插入额外的处理步骤，比如模糊、颜色校正等。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">composer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">THREE</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">EffectComposer</span><span style="color:#E1E4E8;">(renderer)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">renderPass</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">THREE</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">RenderPass</span><span style="color:#E1E4E8;">(scene, camera)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">composer.</span><span style="color:#B392F0;">addPass</span><span style="color:#E1E4E8;">(renderPass)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 添加更多Pass以实现不同的后处理效果</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">composer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">THREE</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">EffectComposer</span><span style="color:#24292E;">(renderer)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">renderPass</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">THREE</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">RenderPass</span><span style="color:#24292E;">(scene, camera)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">composer.</span><span style="color:#6F42C1;">addPass</span><span style="color:#24292E;">(renderPass)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 添加更多Pass以实现不同的后处理效果</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="什么是顶点着色器和片元着色器" tabindex="-1">什么是顶点着色器和片元着色器？ <a class="header-anchor" href="#什么是顶点着色器和片元着色器" aria-label="Permalink to &quot;什么是顶点着色器和片元着色器？&quot;">​</a></h2><ul><li>顶点着色器(Vertex Shader)：处理每个顶点数据的程序，如顶点位置、颜色等。它运行在渲染图形的每个顶点上，用于确定顶点的最终位置和其他顶点相关属性的处理。</li><li>片元着色器(Fragment Shader)：也称为像素着色器，处理图形的每个片元（即像素或屏幕上的点）的程序。它决定每个片元的颜色及其最终输出到屏幕上的外观。</li></ul><h2 id="如何在-three-js-中实现自定义着色器效果" tabindex="-1">如何在 Three.js 中实现自定义着色器效果？ <a class="header-anchor" href="#如何在-three-js-中实现自定义着色器效果" aria-label="Permalink to &quot;如何在 Three.js 中实现自定义着色器效果？&quot;">​</a></h2><p>自定义着色器可以通过 <code>ShaderMaterial</code> 或 <code>RawShaderMaterial</code> 来实现，允许开发者直接编写 <code>GLSL</code> 代码来控制顶点和片元的渲染过程。</p><p>通过提供顶点着色器和片元着色器的代码，可以创建具有复杂效果的材质。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">material</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">THREE</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">ShaderMaterial</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  vertexShader: document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;vertexShader&#39;</span><span style="color:#E1E4E8;">).textContent,</span></span>
<span class="line"><span style="color:#E1E4E8;">  fragmentShader: document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;fragmentShader&#39;</span><span style="color:#E1E4E8;">).textContent,</span></span>
<span class="line"><span style="color:#E1E4E8;">  uniforms: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    time: { value: </span><span style="color:#79B8FF;">1.0</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">    resolution: { value: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">THREE</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Vector2</span><span style="color:#E1E4E8;">() }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">material</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">THREE</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">ShaderMaterial</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  vertexShader: document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;vertexShader&#39;</span><span style="color:#24292E;">).textContent,</span></span>
<span class="line"><span style="color:#24292E;">  fragmentShader: document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;fragmentShader&#39;</span><span style="color:#24292E;">).textContent,</span></span>
<span class="line"><span style="color:#24292E;">  uniforms: {</span></span>
<span class="line"><span style="color:#24292E;">    time: { value: </span><span style="color:#005CC5;">1.0</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">    resolution: { value: </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">THREE</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Vector2</span><span style="color:#24292E;">() }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="如何传递-uniforms-和-attributes-到着色器" tabindex="-1">如何传递 uniforms 和 attributes 到着色器？ <a class="header-anchor" href="#如何传递-uniforms-和-attributes-到着色器" aria-label="Permalink to &quot;如何传递 uniforms 和 attributes 到着色器？&quot;">​</a></h2><ul><li><p><code>Uniforms</code> 是从 <code>JavaScript</code> 代码传递到着色器（顶点和片元）中的全局变量，对于着色器的所有顶点和片元来说，<code>uniforms</code> 的值都是相同的。它们常用于传递如变换矩阵、光照参数或时间等信息。</p></li><li><p><code>Attributes</code> 是只能在顶点着色器中访问的变量，用于每个顶点传递数据，比如顶点位置、法线、纹理坐标等。每个顶点的 <code>attributes</code> 值都是唯一的。</p></li></ul><p>在 <code>ShaderMaterial</code> 中，你可以通过 <code>uniforms</code> 属性传递 <code>uniforms</code>，通过定义 <code>attribute</code> 变量在顶点着色器中接收 <code>attributes</code>。</p><h2 id="glsl中常用的数据类型有哪些" tabindex="-1">GLSL中常用的数据类型有哪些？ <a class="header-anchor" href="#glsl中常用的数据类型有哪些" aria-label="Permalink to &quot;GLSL中常用的数据类型有哪些？&quot;">​</a></h2><p>GLSL（OpenGL着色语言）中常用的数据类型包括：</p><ul><li>基础数据类型：<code>int</code>（整型）、<code>float</code>（浮点型）、<code>bool</code>（布尔型）</li><li>向量类型：<code>vec2</code>、<code>vec3</code>、<code>vec4</code>（浮点向量）、<code>ivec2</code>、<code>ivec3</code>、<code>ivec4</code>（整型向量）、<code>bvec2</code>、<code>bvec3</code>、<code>bvec4</code>（布尔向量）</li><li>矩阵类型：<code>mat2</code>、<code>mat3</code>、<code>mat4</code></li><li>采样器类型：<code>sampler2D</code>（二维纹理）、<code>samplerCube</code>（立方体纹理）</li></ul><h2 id="three-js-中的性能优化策略有哪些" tabindex="-1">Three.js 中的性能优化策略有哪些？ <a class="header-anchor" href="#three-js-中的性能优化策略有哪些" aria-label="Permalink to &quot;Three.js 中的性能优化策略有哪些？&quot;">​</a></h2><ul><li>使用 <code>BufferGeometry</code> 代替 <code>Geometry</code>。</li><li>合理使用材质和纹理，避免创建过多的材质实例。</li><li>对于静态场景，使用 <code>MeshBasicMaterial</code>，不需要光照的材质。</li><li>使用 <code>InstancedMesh</code> 渲染大量相同物体，减少绘制调用。</li><li>限制场景中的光源数量，尤其是<strong>阴影</strong>产生的光源。</li></ul><h2 id="解释-three-js-的物理引擎集成方式" tabindex="-1">解释 Three.js 的物理引擎集成方式 <a class="header-anchor" href="#解释-three-js-的物理引擎集成方式" aria-label="Permalink to &quot;解释 Three.js 的物理引擎集成方式&quot;">​</a></h2><p><code>Three.js</code> 本身不包含物理引擎，但可以与诸如 <code>cannon.js</code>、<code>ammo.js</code>等物理引擎集成，来为场景中的对象添加物理效果（如碰撞检测、重力）。</p><p>通过在 <code>Three.js</code> 渲染循环中更新物理引擎计算出的物体位置和旋转，可以在 3D 场景中实现物理效果。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 使用cannon.js作为物理引擎</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">world</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">CANNON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">World</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">world.gravity.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">9.82</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 创建物理世界中的物体</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">body</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">CANNON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Body</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  mass: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  shape: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">CANNON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Box</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">CANNON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Vec3</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">world.</span><span style="color:#B392F0;">addBody</span><span style="color:#E1E4E8;">(body)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 在动画循环中更新物理世界状态</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">animate</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  world.</span><span style="color:#B392F0;">step</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">60</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 更新Three.js场景中物体的位置</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 使用cannon.js作为物理引擎</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">world</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">CANNON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">World</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">world.gravity.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">9.82</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 创建物理世界中的物体</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">body</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">CANNON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Body</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  mass: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  shape: </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">CANNON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Box</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">CANNON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Vec3</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">world.</span><span style="color:#6F42C1;">addBody</span><span style="color:#24292E;">(body)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 在动画循环中更新物理世界状态</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">animate</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  world.</span><span style="color:#6F42C1;">step</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">60</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 更新Three.js场景中物体的位置</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div>`,79),o=[e];function r(c,t,E,y,i,d){return a(),n("div",null,o)}const b=s(p,[["render",r]]);export{F as __pageData,b as default};
